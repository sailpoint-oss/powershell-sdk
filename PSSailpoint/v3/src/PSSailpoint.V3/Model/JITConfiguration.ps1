#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Enabled
The indicator for just-in-time provisioning enabled
.PARAMETER SourceId
the sourceId that mapped to just-in-time provisioning configuration
.PARAMETER SourceAttributeMappings
A mapping of identity profile attribute names to SAML assertion attribute names
.OUTPUTS

JITConfiguration<PSCustomObject>
#>

function Initialize-JITConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${SourceAttributeMappings}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => JITConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "sourceId" = ${SourceId}
            "sourceAttributeMappings" = ${SourceAttributeMappings}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JITConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to JITConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JITConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToJITConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => JITConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JITConfiguration
        $AllProperties = ("enabled", "sourceId", "sourceAttributeMappings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceAttributeMappings"))) { #optional property not found
            $SourceAttributeMappings = $null
        } else {
            $SourceAttributeMappings = $JsonParameters.PSobject.Properties["sourceAttributeMappings"].value
        }

        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "sourceId" = ${SourceId}
            "sourceAttributeMappings" = ${SourceAttributeMappings}
        }

        return $PSO
    }

}

