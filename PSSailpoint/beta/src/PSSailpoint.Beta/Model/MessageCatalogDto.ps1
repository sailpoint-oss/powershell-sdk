#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Locale
The language in which the messages are returned
.PARAMETER Messages
The list of message with their keys and formats
.OUTPUTS

MessageCatalogDto<PSCustomObject>
#>

function Initialize-BetaMessageCatalogDto {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Locale},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Messages}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaMessageCatalogDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "locale" = ${Locale}
            "messages" = ${Messages}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MessageCatalogDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to MessageCatalogDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MessageCatalogDto<PSCustomObject>
#>
function ConvertFrom-BetaJsonToMessageCatalogDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaMessageCatalogDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaMessageCatalogDto
        $AllProperties = ("locale", "messages")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locale"))) { #optional property not found
            $Locale = $null
        } else {
            $Locale = $JsonParameters.PSobject.Properties["locale"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messages"))) { #optional property not found
            $Messages = $null
        } else {
            $Messages = $JsonParameters.PSobject.Properties["messages"].value
        }

        $PSO = [PSCustomObject]@{
            "locale" = ${Locale}
            "messages" = ${Messages}
        }

        return $PSO
    }

}

