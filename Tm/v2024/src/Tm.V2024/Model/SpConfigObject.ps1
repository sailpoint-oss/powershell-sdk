#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Response model for get object configuration.

.PARAMETER ObjectType
The object type this configuration is for.
.PARAMETER ResolveByIdUrl
No description available.
.PARAMETER ResolveByNameUrl
Url and query parameters to be used to resolve this type of object by name.
.PARAMETER ExportUrl
No description available.
.PARAMETER ExportRight
Rights needed by the invoker of sp-config/export in order to export this type of object.
.PARAMETER ExportLimit
Pagination limit imposed by the target service for this object type.
.PARAMETER ImportUrl
No description available.
.PARAMETER ImportRight
Rights needed by the invoker of sp-config/import in order to import this type of object.
.PARAMETER ImportLimit
Pagination limit imposed by the target service for this object type.
.PARAMETER ReferenceExtractors
List of json paths within an exported object of this type that represent references that need to be resolved.
.PARAMETER SignatureRequired
If true, this type of object will be JWS signed and cannot be modified before import.
.PARAMETER LegacyObject
No description available.
.PARAMETER OnePerTenant
No description available.
.OUTPUTS

SpConfigObject<PSCustomObject>
#>

function Initialize-V2024SpConfigObject {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResolveByIdUrl},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ResolveByNameUrl},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ExportUrl},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExportRight},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExportLimit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ImportUrl},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImportRight},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ImportLimit},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ReferenceExtractors},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SignatureRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LegacyObject} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OnePerTenant} = $false
    )

    Process {
        'Creating PSCustomObject: Tm.V2024 => V2024SpConfigObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "objectType" = ${ObjectType}
            "resolveByIdUrl" = ${ResolveByIdUrl}
            "resolveByNameUrl" = ${ResolveByNameUrl}
            "exportUrl" = ${ExportUrl}
            "exportRight" = ${ExportRight}
            "exportLimit" = ${ExportLimit}
            "importUrl" = ${ImportUrl}
            "importRight" = ${ImportRight}
            "importLimit" = ${ImportLimit}
            "referenceExtractors" = ${ReferenceExtractors}
            "signatureRequired" = ${SignatureRequired}
            "legacyObject" = ${LegacyObject}
            "onePerTenant" = ${OnePerTenant}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SpConfigObject<PSCustomObject>

.DESCRIPTION

Convert from JSON to SpConfigObject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SpConfigObject<PSCustomObject>
#>
function ConvertFrom-V2024JsonToSpConfigObject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.V2024 => V2024SpConfigObject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024SpConfigObject
        $AllProperties = ("objectType", "resolveByIdUrl", "resolveByNameUrl", "exportUrl", "exportRight", "exportLimit", "importUrl", "importRight", "importLimit", "referenceExtractors", "signatureRequired", "legacyObject", "onePerTenant")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "objectType"))) { #optional property not found
            $ObjectType = $null
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["objectType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolveByIdUrl"))) { #optional property not found
            $ResolveByIdUrl = $null
        } else {
            $ResolveByIdUrl = $JsonParameters.PSobject.Properties["resolveByIdUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolveByNameUrl"))) { #optional property not found
            $ResolveByNameUrl = $null
        } else {
            $ResolveByNameUrl = $JsonParameters.PSobject.Properties["resolveByNameUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exportUrl"))) { #optional property not found
            $ExportUrl = $null
        } else {
            $ExportUrl = $JsonParameters.PSobject.Properties["exportUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exportRight"))) { #optional property not found
            $ExportRight = $null
        } else {
            $ExportRight = $JsonParameters.PSobject.Properties["exportRight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exportLimit"))) { #optional property not found
            $ExportLimit = $null
        } else {
            $ExportLimit = $JsonParameters.PSobject.Properties["exportLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "importUrl"))) { #optional property not found
            $ImportUrl = $null
        } else {
            $ImportUrl = $JsonParameters.PSobject.Properties["importUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "importRight"))) { #optional property not found
            $ImportRight = $null
        } else {
            $ImportRight = $JsonParameters.PSobject.Properties["importRight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "importLimit"))) { #optional property not found
            $ImportLimit = $null
        } else {
            $ImportLimit = $JsonParameters.PSobject.Properties["importLimit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "referenceExtractors"))) { #optional property not found
            $ReferenceExtractors = $null
        } else {
            $ReferenceExtractors = $JsonParameters.PSobject.Properties["referenceExtractors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signatureRequired"))) { #optional property not found
            $SignatureRequired = $null
        } else {
            $SignatureRequired = $JsonParameters.PSobject.Properties["signatureRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "legacyObject"))) { #optional property not found
            $LegacyObject = $null
        } else {
            $LegacyObject = $JsonParameters.PSobject.Properties["legacyObject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "onePerTenant"))) { #optional property not found
            $OnePerTenant = $null
        } else {
            $OnePerTenant = $JsonParameters.PSobject.Properties["onePerTenant"].value
        }

        $PSO = [PSCustomObject]@{
            "objectType" = ${ObjectType}
            "resolveByIdUrl" = ${ResolveByIdUrl}
            "resolveByNameUrl" = ${ResolveByNameUrl}
            "exportUrl" = ${ExportUrl}
            "exportRight" = ${ExportRight}
            "exportLimit" = ${ExportLimit}
            "importUrl" = ${ImportUrl}
            "importRight" = ${ImportRight}
            "importLimit" = ${ImportLimit}
            "referenceExtractors" = ${ReferenceExtractors}
            "signatureRequired" = ${SignatureRequired}
            "legacyObject" = ${LegacyObject}
            "onePerTenant" = ${OnePerTenant}
        }

        return $PSO
    }

}

