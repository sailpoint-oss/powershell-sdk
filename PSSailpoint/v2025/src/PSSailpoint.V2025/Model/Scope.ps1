#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This defines what access the segment is giving

.PARAMETER Scope
No description available.
.PARAMETER Visibility
No description available.
.PARAMETER ScopeFilter
No description available.
.PARAMETER ScopeSelection
List of Identities that are assigned to the segment
.OUTPUTS

Scope<PSCustomObject>
#>

function Initialize-V2025Scope {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ENTITLEMENT", "CERTIFICATION", "IDENTITY", "ENTITLEMENTREQUEST")]
        [PSCustomObject]
        ${Scope},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ALL", "FILTER", "SELECTION", "UNSEGMENTED")]
        [PSCustomObject]
        ${Visibility},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ScopeFilter},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ScopeSelection}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025Scope' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "scope" = ${Scope}
            "visibility" = ${Visibility}
            "scopeFilter" = ${ScopeFilter}
            "scopeSelection" = ${ScopeSelection}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Scope<PSCustomObject>

.DESCRIPTION

Convert from JSON to Scope<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Scope<PSCustomObject>
#>
function ConvertFrom-V2025JsonToScope {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025Scope' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025Scope
        $AllProperties = ("scope", "visibility", "scopeFilter", "scopeSelection")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visibility"))) { #optional property not found
            $Visibility = $null
        } else {
            $Visibility = $JsonParameters.PSobject.Properties["visibility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scopeFilter"))) { #optional property not found
            $ScopeFilter = $null
        } else {
            $ScopeFilter = $JsonParameters.PSobject.Properties["scopeFilter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scopeSelection"))) { #optional property not found
            $ScopeSelection = $null
        } else {
            $ScopeSelection = $JsonParameters.PSobject.Properties["scopeSelection"].value
        }

        $PSO = [PSCustomObject]@{
            "scope" = ${Scope}
            "visibility" = ${Visibility}
            "scopeFilter" = ${ScopeFilter}
            "scopeSelection" = ${ScopeSelection}
        }

        return $PSO
    }

}

