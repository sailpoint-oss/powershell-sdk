#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllowRequestOnBehalfOfAnyoneByAnyone
If this is true, anyone can request access for anyone.
.PARAMETER AllowRequestOnBehalfOfEmployeeByManager
If this is true, a manager can request access for his or her direct reports.
.OUTPUTS

RequestOnBehalfOfConfig<PSCustomObject>
#>

function Initialize-RequestOnBehalfOfConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowRequestOnBehalfOfAnyoneByAnyone} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowRequestOnBehalfOfEmployeeByManager} = $false
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => RequestOnBehalfOfConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "allowRequestOnBehalfOfAnyoneByAnyone" = ${AllowRequestOnBehalfOfAnyoneByAnyone}
            "allowRequestOnBehalfOfEmployeeByManager" = ${AllowRequestOnBehalfOfEmployeeByManager}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RequestOnBehalfOfConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to RequestOnBehalfOfConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RequestOnBehalfOfConfig<PSCustomObject>
#>
function ConvertFrom-JsonToRequestOnBehalfOfConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => RequestOnBehalfOfConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RequestOnBehalfOfConfig
        $AllProperties = ("allowRequestOnBehalfOfAnyoneByAnyone", "allowRequestOnBehalfOfEmployeeByManager")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowRequestOnBehalfOfAnyoneByAnyone"))) { #optional property not found
            $AllowRequestOnBehalfOfAnyoneByAnyone = $null
        } else {
            $AllowRequestOnBehalfOfAnyoneByAnyone = $JsonParameters.PSobject.Properties["allowRequestOnBehalfOfAnyoneByAnyone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowRequestOnBehalfOfEmployeeByManager"))) { #optional property not found
            $AllowRequestOnBehalfOfEmployeeByManager = $null
        } else {
            $AllowRequestOnBehalfOfEmployeeByManager = $JsonParameters.PSobject.Properties["allowRequestOnBehalfOfEmployeeByManager"].value
        }

        $PSO = [PSCustomObject]@{
            "allowRequestOnBehalfOfAnyoneByAnyone" = ${AllowRequestOnBehalfOfAnyoneByAnyone}
            "allowRequestOnBehalfOfEmployeeByManager" = ${AllowRequestOnBehalfOfEmployeeByManager}
        }

        return $PSO
    }

}

