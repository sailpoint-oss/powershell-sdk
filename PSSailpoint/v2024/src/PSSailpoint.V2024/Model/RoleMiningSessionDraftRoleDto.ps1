#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name of the draft role
.PARAMETER Description
Draft role description
.PARAMETER IdentityIds
The list of identities for this role mining session.
.PARAMETER EntitlementIds
The list of entitlement ids for this role mining session.
.PARAMETER ExcludedEntitlements
The list of excluded entitlement ids.
.PARAMETER Modified
Last modified date
.PARAMETER Type
No description available.
.PARAMETER Id
Id of the potential draft role
.PARAMETER CreatedDate
The date-time when this potential draft role was created.
.PARAMETER ModifiedDate
The date-time when this potential draft role was modified.
.OUTPUTS

RoleMiningSessionDraftRoleDto<PSCustomObject>
#>

function Initialize-V2024RoleMiningSessionDraftRoleDto {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${IdentityIds},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${EntitlementIds},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ExcludedEntitlements},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Modified},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("SPECIALIZED", "COMMON")]
        [PSCustomObject]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedDate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ModifiedDate}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024RoleMiningSessionDraftRoleDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "identityIds" = ${IdentityIds}
            "entitlementIds" = ${EntitlementIds}
            "excludedEntitlements" = ${ExcludedEntitlements}
            "modified" = ${Modified}
            "type" = ${Type}
            "id" = ${Id}
            "createdDate" = ${CreatedDate}
            "modifiedDate" = ${ModifiedDate}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleMiningSessionDraftRoleDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleMiningSessionDraftRoleDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleMiningSessionDraftRoleDto<PSCustomObject>
#>
function ConvertFrom-V2024JsonToRoleMiningSessionDraftRoleDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024RoleMiningSessionDraftRoleDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024RoleMiningSessionDraftRoleDto
        $AllProperties = ("name", "description", "identityIds", "entitlementIds", "excludedEntitlements", "modified", "type", "id", "createdDate", "modifiedDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityIds"))) { #optional property not found
            $IdentityIds = $null
        } else {
            $IdentityIds = $JsonParameters.PSobject.Properties["identityIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entitlementIds"))) { #optional property not found
            $EntitlementIds = $null
        } else {
            $EntitlementIds = $JsonParameters.PSobject.Properties["entitlementIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excludedEntitlements"))) { #optional property not found
            $ExcludedEntitlements = $null
        } else {
            $ExcludedEntitlements = $JsonParameters.PSobject.Properties["excludedEntitlements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdDate"))) { #optional property not found
            $CreatedDate = $null
        } else {
            $CreatedDate = $JsonParameters.PSobject.Properties["createdDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modifiedDate"))) { #optional property not found
            $ModifiedDate = $null
        } else {
            $ModifiedDate = $JsonParameters.PSobject.Properties["modifiedDate"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "identityIds" = ${IdentityIds}
            "entitlementIds" = ${EntitlementIds}
            "excludedEntitlements" = ${ExcludedEntitlements}
            "modified" = ${Modified}
            "type" = ${Type}
            "id" = ${Id}
            "createdDate" = ${CreatedDate}
            "modifiedDate" = ${ModifiedDate}
        }

        return $PSO
    }

}

