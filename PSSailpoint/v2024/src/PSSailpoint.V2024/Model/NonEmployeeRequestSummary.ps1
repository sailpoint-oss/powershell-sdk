#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Approved
The number of approved non-employee requests on all sources that *requested-for* user manages.
.PARAMETER Rejected
The number of rejected non-employee requests on all sources that *requested-for* user manages.
.PARAMETER Pending
The number of pending non-employee requests on all sources that *requested-for* user manages.
.PARAMETER NonEmployeeCount
The number of non-employee records on all sources that *requested-for* user manages.
.OUTPUTS

NonEmployeeRequestSummary<PSCustomObject>
#>

function Initialize-V2024NonEmployeeRequestSummary {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Approved},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Rejected},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Pending},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NonEmployeeCount}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024NonEmployeeRequestSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "approved" = ${Approved}
            "rejected" = ${Rejected}
            "pending" = ${Pending}
            "nonEmployeeCount" = ${NonEmployeeCount}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NonEmployeeRequestSummary<PSCustomObject>

.DESCRIPTION

Convert from JSON to NonEmployeeRequestSummary<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NonEmployeeRequestSummary<PSCustomObject>
#>
function ConvertFrom-V2024JsonToNonEmployeeRequestSummary {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024NonEmployeeRequestSummary' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024NonEmployeeRequestSummary
        $AllProperties = ("approved", "rejected", "pending", "nonEmployeeCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approved"))) { #optional property not found
            $Approved = $null
        } else {
            $Approved = $JsonParameters.PSobject.Properties["approved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rejected"))) { #optional property not found
            $Rejected = $null
        } else {
            $Rejected = $JsonParameters.PSobject.Properties["rejected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pending"))) { #optional property not found
            $Pending = $null
        } else {
            $Pending = $JsonParameters.PSobject.Properties["pending"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonEmployeeCount"))) { #optional property not found
            $NonEmployeeCount = $null
        } else {
            $NonEmployeeCount = $JsonParameters.PSobject.Properties["nonEmployeeCount"].value
        }

        $PSO = [PSCustomObject]@{
            "approved" = ${Approved}
            "rejected" = ${Rejected}
            "pending" = ${Pending}
            "nonEmployeeCount" = ${NonEmployeeCount}
        }

        return $PSO
    }

}

