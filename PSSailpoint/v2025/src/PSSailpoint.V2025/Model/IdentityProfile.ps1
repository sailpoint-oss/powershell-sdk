#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name of the Object
.PARAMETER Description
Identity profile's description.
.PARAMETER Owner
No description available.
.PARAMETER Priority
Identity profile's priority.
.PARAMETER AuthoritativeSource
No description available.
.PARAMETER IdentityRefreshRequired
Set this value to 'True' if an identity refresh is necessary. You would typically want to trigger an identity refresh when a change has been made on the source.
.PARAMETER IdentityCount
Number of identities belonging to the identity profile.
.PARAMETER IdentityAttributeConfig
No description available.
.PARAMETER IdentityExceptionReportReference
No description available.
.PARAMETER HasTimeBasedAttr
Indicates the value of `requiresPeriodicRefresh` attribute for the identity profile.
.OUTPUTS

IdentityProfile<PSCustomObject>
#>

function Initialize-V2025IdentityProfile {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Priority},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AuthoritativeSource},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IdentityRefreshRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IdentityCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdentityAttributeConfig},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdentityExceptionReportReference},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasTimeBasedAttr} = $false
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025IdentityProfile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AuthoritativeSource) {
            throw "invalid value for 'AuthoritativeSource', 'AuthoritativeSource' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "owner" = ${Owner}
            "priority" = ${Priority}
            "authoritativeSource" = ${AuthoritativeSource}
            "identityRefreshRequired" = ${IdentityRefreshRequired}
            "identityCount" = ${IdentityCount}
            "identityAttributeConfig" = ${IdentityAttributeConfig}
            "identityExceptionReportReference" = ${IdentityExceptionReportReference}
            "hasTimeBasedAttr" = ${HasTimeBasedAttr}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentityProfile<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentityProfile<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentityProfile<PSCustomObject>
#>
function ConvertFrom-V2025JsonToIdentityProfile {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025IdentityProfile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025IdentityProfile
        $AllProperties = ("id", "name", "created", "modified", "description", "owner", "priority", "authoritativeSource", "identityRefreshRequired", "identityCount", "identityAttributeConfig", "identityExceptionReportReference", "hasTimeBasedAttr")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authoritativeSource"))) {
            throw "Error! JSON cannot be serialized due to the required property 'authoritativeSource' missing."
        } else {
            $AuthoritativeSource = $JsonParameters.PSobject.Properties["authoritativeSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityRefreshRequired"))) { #optional property not found
            $IdentityRefreshRequired = $null
        } else {
            $IdentityRefreshRequired = $JsonParameters.PSobject.Properties["identityRefreshRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityCount"))) { #optional property not found
            $IdentityCount = $null
        } else {
            $IdentityCount = $JsonParameters.PSobject.Properties["identityCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityAttributeConfig"))) { #optional property not found
            $IdentityAttributeConfig = $null
        } else {
            $IdentityAttributeConfig = $JsonParameters.PSobject.Properties["identityAttributeConfig"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityExceptionReportReference"))) { #optional property not found
            $IdentityExceptionReportReference = $null
        } else {
            $IdentityExceptionReportReference = $JsonParameters.PSobject.Properties["identityExceptionReportReference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hasTimeBasedAttr"))) { #optional property not found
            $HasTimeBasedAttr = $null
        } else {
            $HasTimeBasedAttr = $JsonParameters.PSobject.Properties["hasTimeBasedAttr"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "created" = ${Created}
            "modified" = ${Modified}
            "description" = ${Description}
            "owner" = ${Owner}
            "priority" = ${Priority}
            "authoritativeSource" = ${AuthoritativeSource}
            "identityRefreshRequired" = ${IdentityRefreshRequired}
            "identityCount" = ${IdentityCount}
            "identityAttributeConfig" = ${IdentityAttributeConfig}
            "identityExceptionReportReference" = ${IdentityExceptionReportReference}
            "hasTimeBasedAttr" = ${HasTimeBasedAttr}
        }

        return $PSO
    }

}

