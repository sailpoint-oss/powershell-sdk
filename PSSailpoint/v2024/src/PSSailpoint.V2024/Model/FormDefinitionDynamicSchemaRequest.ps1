#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Attributes
No description available.
.PARAMETER Description
Description is the form definition dynamic schema description text
.PARAMETER Id
ID is a unique identifier
.PARAMETER Type
Type is the form definition dynamic schema type
.PARAMETER VersionNumber
VersionNumber is the form definition dynamic schema version number
.OUTPUTS

FormDefinitionDynamicSchemaRequest<PSCustomObject>
#>

function Initialize-V2024FormDefinitionDynamicSchemaRequest {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Attributes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${VersionNumber}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024FormDefinitionDynamicSchemaRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attributes" = ${Attributes}
            "description" = ${Description}
            "id" = ${Id}
            "type" = ${Type}
            "versionNumber" = ${VersionNumber}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FormDefinitionDynamicSchemaRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to FormDefinitionDynamicSchemaRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FormDefinitionDynamicSchemaRequest<PSCustomObject>
#>
function ConvertFrom-V2024JsonToFormDefinitionDynamicSchemaRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024FormDefinitionDynamicSchemaRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024FormDefinitionDynamicSchemaRequest
        $AllProperties = ("attributes", "description", "id", "type", "versionNumber")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributes"))) { #optional property not found
            $Attributes = $null
        } else {
            $Attributes = $JsonParameters.PSobject.Properties["attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "versionNumber"))) { #optional property not found
            $VersionNumber = $null
        } else {
            $VersionNumber = $JsonParameters.PSobject.Properties["versionNumber"].value
        }

        $PSO = [PSCustomObject]@{
            "attributes" = ${Attributes}
            "description" = ${Description}
            "id" = ${Id}
            "type" = ${Type}
            "versionNumber" = ${VersionNumber}
        }

        return $PSO
    }

}

