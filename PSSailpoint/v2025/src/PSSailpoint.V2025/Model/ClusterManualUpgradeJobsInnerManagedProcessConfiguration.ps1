#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Configuration of the managed processes involved in the upgrade.

.PARAMETER Charon
No description available.
.PARAMETER Ccg
No description available.
.PARAMETER OtelAgent
No description available.
.PARAMETER Relay
No description available.
.PARAMETER Toolbox
No description available.
.OUTPUTS

ClusterManualUpgradeJobsInnerManagedProcessConfiguration<PSCustomObject>
#>

function Initialize-V2025ClusterManualUpgradeJobsInnerManagedProcessConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Charon},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Ccg},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OtelAgent},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Relay},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Toolbox}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025ClusterManualUpgradeJobsInnerManagedProcessConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "charon" = ${Charon}
            "ccg" = ${Ccg}
            "otel_agent" = ${OtelAgent}
            "relay" = ${Relay}
            "toolbox" = ${Toolbox}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterManualUpgradeJobsInnerManagedProcessConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterManualUpgradeJobsInnerManagedProcessConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterManualUpgradeJobsInnerManagedProcessConfiguration<PSCustomObject>
#>
function ConvertFrom-V2025JsonToClusterManualUpgradeJobsInnerManagedProcessConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025ClusterManualUpgradeJobsInnerManagedProcessConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025ClusterManualUpgradeJobsInnerManagedProcessConfiguration
        $AllProperties = ("charon", "ccg", "otel_agent", "relay", "toolbox")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "charon"))) { #optional property not found
            $Charon = $null
        } else {
            $Charon = $JsonParameters.PSobject.Properties["charon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ccg"))) { #optional property not found
            $Ccg = $null
        } else {
            $Ccg = $JsonParameters.PSobject.Properties["ccg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "otel_agent"))) { #optional property not found
            $OtelAgent = $null
        } else {
            $OtelAgent = $JsonParameters.PSobject.Properties["otel_agent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "relay"))) { #optional property not found
            $Relay = $null
        } else {
            $Relay = $JsonParameters.PSobject.Properties["relay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "toolbox"))) { #optional property not found
            $Toolbox = $null
        } else {
            $Toolbox = $JsonParameters.PSobject.Properties["toolbox"].value
        }

        $PSO = [PSCustomObject]@{
            "charon" = ${Charon}
            "ccg" = ${Ccg}
            "otel_agent" = ${OtelAgent}
            "relay" = ${Relay}
            "toolbox" = ${Toolbox}
        }

        return $PSO
    }

}

