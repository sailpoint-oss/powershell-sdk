#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TimeZone
The timezone must be in a valid ISO 8601 format. Timezones in ISO 8601 are represented as UTC (represented as 'Z') or as an offset from UTC. The offset format can be +/-hh:mm, +/-hhmm, or +/-hh.
.OUTPUTS

ActivateCampaignOptions<PSCustomObject>
#>

function Initialize-BetaActivateCampaignOptions {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TimeZone} = "Z"
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaActivateCampaignOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "timeZone" = ${TimeZone}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ActivateCampaignOptions<PSCustomObject>

.DESCRIPTION

Convert from JSON to ActivateCampaignOptions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ActivateCampaignOptions<PSCustomObject>
#>
function ConvertFrom-BetaJsonToActivateCampaignOptions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaActivateCampaignOptions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaActivateCampaignOptions
        $AllProperties = ("timeZone")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeZone"))) { #optional property not found
            $TimeZone = $null
        } else {
            $TimeZone = $JsonParameters.PSobject.Properties["timeZone"].value
        }

        $PSO = [PSCustomObject]@{
            "timeZone" = ${TimeZone}
        }

        return $PSO
    }

}

