#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MatchTerms
No description available.
.PARAMETER And
If it is AND operators for match terms
.OUTPUTS

SelectorAccountMatchConfigMatchExpression<PSCustomObject>
#>

function Initialize-BetaSelectorAccountMatchConfigMatchExpression {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${MatchTerms},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${And} = $true
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaSelectorAccountMatchConfigMatchExpression' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "matchTerms" = ${MatchTerms}
            "and" = ${And}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SelectorAccountMatchConfigMatchExpression<PSCustomObject>

.DESCRIPTION

Convert from JSON to SelectorAccountMatchConfigMatchExpression<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SelectorAccountMatchConfigMatchExpression<PSCustomObject>
#>
function ConvertFrom-BetaJsonToSelectorAccountMatchConfigMatchExpression {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaSelectorAccountMatchConfigMatchExpression' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaSelectorAccountMatchConfigMatchExpression
        $AllProperties = ("matchTerms", "and")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matchTerms"))) { #optional property not found
            $MatchTerms = $null
        } else {
            $MatchTerms = $JsonParameters.PSobject.Properties["matchTerms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "and"))) { #optional property not found
            $And = $null
        } else {
            $And = $JsonParameters.PSobject.Properties["and"].value
        }

        $PSO = [PSCustomObject]@{
            "matchTerms" = ${MatchTerms}
            "and" = ${And}
        }

        return $PSO
    }

}

