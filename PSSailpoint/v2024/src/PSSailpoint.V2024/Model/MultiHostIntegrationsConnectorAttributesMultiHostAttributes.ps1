#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Attributes of Multi-Host Integration

.PARAMETER Password
Password.
.PARAMETER ConnectorFiles
Connector file.
.PARAMETER AuthType
Authentication type.
.PARAMETER User
Username.
.OUTPUTS

MultiHostIntegrationsConnectorAttributesMultiHostAttributes<PSCustomObject>
#>

function Initialize-V2024MultiHostIntegrationsConnectorAttributesMultiHostAttributes {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectorFiles},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024MultiHostIntegrationsConnectorAttributesMultiHostAttributes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "password" = ${Password}
            "connector_files" = ${ConnectorFiles}
            "authType" = ${AuthType}
            "user" = ${User}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MultiHostIntegrationsConnectorAttributesMultiHostAttributes<PSCustomObject>

.DESCRIPTION

Convert from JSON to MultiHostIntegrationsConnectorAttributesMultiHostAttributes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MultiHostIntegrationsConnectorAttributesMultiHostAttributes<PSCustomObject>
#>
function ConvertFrom-V2024JsonToMultiHostIntegrationsConnectorAttributesMultiHostAttributes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024MultiHostIntegrationsConnectorAttributesMultiHostAttributes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024MultiHostIntegrationsConnectorAttributesMultiHostAttributes
        $AllProperties = ("password", "connector_files", "authType", "user")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connector_files"))) { #optional property not found
            $ConnectorFiles = $null
        } else {
            $ConnectorFiles = $JsonParameters.PSobject.Properties["connector_files"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authType"))) { #optional property not found
            $AuthType = $null
        } else {
            $AuthType = $JsonParameters.PSobject.Properties["authType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        $PSO = [PSCustomObject]@{
            "password" = ${Password}
            "connector_files" = ${ConnectorFiles}
            "authType" = ${AuthType}
            "user" = ${User}
        }

        return $PSO
    }

}

