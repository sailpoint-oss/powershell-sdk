#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Uuid
Unique identifier for the upgrade job.
.PARAMETER Cookbook
Identifier for the cookbook used in the upgrade job.
.PARAMETER State
Current state of the upgrade job.
.PARAMETER Type
The type of upgrade job (e.g., VA_UPGRADE).
.PARAMETER TargetId
Unique identifier of the target for the upgrade job.
.PARAMETER ManagedProcessConfiguration
No description available.
.OUTPUTS

ClusterManualUpgradeJobsInner<PSCustomObject>
#>

function Initialize-V2024ClusterManualUpgradeJobsInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cookbook},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ManagedProcessConfiguration}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024ClusterManualUpgradeJobsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Uuid) {
            throw "invalid value for 'Uuid', 'Uuid' cannot be null."
        }

        if (!$Cookbook) {
            throw "invalid value for 'Cookbook', 'Cookbook' cannot be null."
        }

        if (!$State) {
            throw "invalid value for 'State', 'State' cannot be null."
        }

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if (!$TargetId) {
            throw "invalid value for 'TargetId', 'TargetId' cannot be null."
        }

        if (!$ManagedProcessConfiguration) {
            throw "invalid value for 'ManagedProcessConfiguration', 'ManagedProcessConfiguration' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "uuid" = ${Uuid}
            "cookbook" = ${Cookbook}
            "state" = ${State}
            "type" = ${Type}
            "targetId" = ${TargetId}
            "managedProcessConfiguration" = ${ManagedProcessConfiguration}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ClusterManualUpgradeJobsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to ClusterManualUpgradeJobsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ClusterManualUpgradeJobsInner<PSCustomObject>
#>
function ConvertFrom-V2024JsonToClusterManualUpgradeJobsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024ClusterManualUpgradeJobsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024ClusterManualUpgradeJobsInner
        $AllProperties = ("uuid", "cookbook", "state", "type", "targetId", "managedProcessConfiguration")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'uuid' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'uuid' missing."
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cookbook"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cookbook' missing."
        } else {
            $Cookbook = $JsonParameters.PSobject.Properties["cookbook"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) {
            throw "Error! JSON cannot be serialized due to the required property 'state' missing."
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'targetId' missing."
        } else {
            $TargetId = $JsonParameters.PSobject.Properties["targetId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managedProcessConfiguration"))) {
            throw "Error! JSON cannot be serialized due to the required property 'managedProcessConfiguration' missing."
        } else {
            $ManagedProcessConfiguration = $JsonParameters.PSobject.Properties["managedProcessConfiguration"].value
        }

        $PSO = [PSCustomObject]@{
            "uuid" = ${Uuid}
            "cookbook" = ${Cookbook}
            "state" = ${State}
            "type" = ${Type}
            "targetId" = ${TargetId}
            "managedProcessConfiguration" = ${ManagedProcessConfiguration}
        }

        return $PSO
    }

}

