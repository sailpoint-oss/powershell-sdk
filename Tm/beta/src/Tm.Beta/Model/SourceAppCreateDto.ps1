#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
The source app name
.PARAMETER Description
The description of the source app
.PARAMETER MatchAllAccounts
True if the source app match all accounts
.PARAMETER AccountSource
No description available.
.OUTPUTS

SourceAppCreateDto<PSCustomObject>
#>

function Initialize-BetaSourceAppCreateDto {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MatchAllAccounts} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AccountSource}
    )

    Process {
        'Creating PSCustomObject: Tm.Beta => BetaSourceAppCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if (!$AccountSource) {
            throw "invalid value for 'AccountSource', 'AccountSource' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "matchAllAccounts" = ${MatchAllAccounts}
            "accountSource" = ${AccountSource}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SourceAppCreateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SourceAppCreateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SourceAppCreateDto<PSCustomObject>
#>
function ConvertFrom-BetaJsonToSourceAppCreateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.Beta => BetaSourceAppCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaSourceAppCreateDto
        $AllProperties = ("name", "description", "matchAllAccounts", "accountSource")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountSource"))) {
            throw "Error! JSON cannot be serialized due to the required property 'accountSource' missing."
        } else {
            $AccountSource = $JsonParameters.PSobject.Properties["accountSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matchAllAccounts"))) { #optional property not found
            $MatchAllAccounts = $null
        } else {
            $MatchAllAccounts = $JsonParameters.PSobject.Properties["matchAllAccounts"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "matchAllAccounts" = ${MatchAllAccounts}
            "accountSource" = ${AccountSource}
        }

        return $PSO
    }

}

