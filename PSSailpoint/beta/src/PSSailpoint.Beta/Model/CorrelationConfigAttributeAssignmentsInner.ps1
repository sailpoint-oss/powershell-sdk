#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The attribute assignment of the correlation configuration.

.PARAMETER Property
The property of the attribute assignment.
.PARAMETER Value
The value of the attribute assignment.
.PARAMETER Operation
The operation of the attribute assignment.
.PARAMETER Complex
Whether or not the it's a complex attribute assignment.
.PARAMETER IgnoreCase
Whether or not the attribute assignment should ignore case.
.PARAMETER MatchMode
The match mode of the attribute assignment.
.PARAMETER FilterString
The filter string of the attribute assignment.
.OUTPUTS

CorrelationConfigAttributeAssignmentsInner<PSCustomObject>
#>

function Initialize-BetaCorrelationConfigAttributeAssignmentsInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Property},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EQ")]
        [String]
        ${Operation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Complex} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IgnoreCase} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ANYWHERE", "START", "END")]
        [String]
        ${MatchMode},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilterString}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaCorrelationConfigAttributeAssignmentsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "property" = ${Property}
            "value" = ${Value}
            "operation" = ${Operation}
            "complex" = ${Complex}
            "ignoreCase" = ${IgnoreCase}
            "matchMode" = ${MatchMode}
            "filterString" = ${FilterString}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CorrelationConfigAttributeAssignmentsInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to CorrelationConfigAttributeAssignmentsInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CorrelationConfigAttributeAssignmentsInner<PSCustomObject>
#>
function ConvertFrom-BetaJsonToCorrelationConfigAttributeAssignmentsInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaCorrelationConfigAttributeAssignmentsInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaCorrelationConfigAttributeAssignmentsInner
        $AllProperties = ("property", "value", "operation", "complex", "ignoreCase", "matchMode", "filterString")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "property"))) { #optional property not found
            $Property = $null
        } else {
            $Property = $JsonParameters.PSobject.Properties["property"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation"))) { #optional property not found
            $Operation = $null
        } else {
            $Operation = $JsonParameters.PSobject.Properties["operation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "complex"))) { #optional property not found
            $Complex = $null
        } else {
            $Complex = $JsonParameters.PSobject.Properties["complex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ignoreCase"))) { #optional property not found
            $IgnoreCase = $null
        } else {
            $IgnoreCase = $JsonParameters.PSobject.Properties["ignoreCase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matchMode"))) { #optional property not found
            $MatchMode = $null
        } else {
            $MatchMode = $JsonParameters.PSobject.Properties["matchMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filterString"))) { #optional property not found
            $FilterString = $null
        } else {
            $FilterString = $JsonParameters.PSobject.Properties["filterString"].value
        }

        $PSO = [PSCustomObject]@{
            "property" = ${Property}
            "value" = ${Value}
            "operation" = ${Operation}
            "complex" = ${Complex}
            "ignoreCase" = ${IgnoreCase}
            "matchMode" = ${MatchMode}
            "filterString" = ${FilterString}
        }

        return $PSO
    }

}

