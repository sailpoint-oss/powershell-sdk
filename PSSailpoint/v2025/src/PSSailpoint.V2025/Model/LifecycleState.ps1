#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name of the Object
.PARAMETER Enabled
Indicates whether the lifecycle state is enabled or disabled.
.PARAMETER TechnicalName
The lifecycle state's technical name. This is for internal use.
.PARAMETER Description
Lifecycle state's description.
.PARAMETER EmailNotificationOption
No description available.
.PARAMETER AccountActions
No description available.
.PARAMETER AccessProfileIds
List of unique access-profile IDs that are associated with the lifecycle state.
.PARAMETER IdentityState
The lifecycle state's associated identity state. This field is generally 'null'.
.PARAMETER AccessActionConfiguration
No description available.
.PARAMETER Priority
Priority level used to determine which profile to assign when a user exists in multiple profiles. Lower numeric values have higher priority.  By default, new profiles are assigned the lowest priority. The assigned profile also controls access granted or removed during provisioning based on lifecycle state changes.
.OUTPUTS

LifecycleState<PSCustomObject>
#>

function Initialize-V2025LifecycleState {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TechnicalName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EmailNotificationOption},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AccountActions},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AccessProfileIds},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "INACTIVE_SHORT_TERM", "INACTIVE_LONG_TERM")]
        [String]
        ${IdentityState},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AccessActionConfiguration},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Priority}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025LifecycleState' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$TechnicalName) {
            throw "invalid value for 'TechnicalName', 'TechnicalName' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "enabled" = ${Enabled}
            "technicalName" = ${TechnicalName}
            "description" = ${Description}
            "emailNotificationOption" = ${EmailNotificationOption}
            "accountActions" = ${AccountActions}
            "accessProfileIds" = ${AccessProfileIds}
            "identityState" = ${IdentityState}
            "accessActionConfiguration" = ${AccessActionConfiguration}
            "priority" = ${Priority}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LifecycleState<PSCustomObject>

.DESCRIPTION

Convert from JSON to LifecycleState<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LifecycleState<PSCustomObject>
#>
function ConvertFrom-V2025JsonToLifecycleState {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025LifecycleState' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025LifecycleState
        $AllProperties = ("id", "name", "created", "modified", "enabled", "technicalName", "description", "identityCount", "emailNotificationOption", "accountActions", "accessProfileIds", "identityState", "accessActionConfiguration", "priority")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "technicalName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'technicalName' missing."
        } else {
            $TechnicalName = $JsonParameters.PSobject.Properties["technicalName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityCount"))) { #optional property not found
            $IdentityCount = $null
        } else {
            $IdentityCount = $JsonParameters.PSobject.Properties["identityCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailNotificationOption"))) { #optional property not found
            $EmailNotificationOption = $null
        } else {
            $EmailNotificationOption = $JsonParameters.PSobject.Properties["emailNotificationOption"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountActions"))) { #optional property not found
            $AccountActions = $null
        } else {
            $AccountActions = $JsonParameters.PSobject.Properties["accountActions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessProfileIds"))) { #optional property not found
            $AccessProfileIds = $null
        } else {
            $AccessProfileIds = $JsonParameters.PSobject.Properties["accessProfileIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityState"))) { #optional property not found
            $IdentityState = $null
        } else {
            $IdentityState = $JsonParameters.PSobject.Properties["identityState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessActionConfiguration"))) { #optional property not found
            $AccessActionConfiguration = $null
        } else {
            $AccessActionConfiguration = $JsonParameters.PSobject.Properties["accessActionConfiguration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "created" = ${Created}
            "modified" = ${Modified}
            "enabled" = ${Enabled}
            "technicalName" = ${TechnicalName}
            "description" = ${Description}
            "identityCount" = ${IdentityCount}
            "emailNotificationOption" = ${EmailNotificationOption}
            "accountActions" = ${AccountActions}
            "accessProfileIds" = ${AccessProfileIds}
            "identityState" = ${IdentityState}
            "accessActionConfiguration" = ${AccessActionConfiguration}
            "priority" = ${Priority}
        }

        return $PSO
    }

}

