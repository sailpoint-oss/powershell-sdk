#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
Value of the category
.PARAMETER MatchCount
Number of matched for each category
.OUTPUTS

DataAccessCategoriesInner<PSCustomObject>
#>

function Initialize-V2024DataAccessCategoriesInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MatchCount}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024DataAccessCategoriesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "matchCount" = ${MatchCount}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DataAccessCategoriesInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to DataAccessCategoriesInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DataAccessCategoriesInner<PSCustomObject>
#>
function ConvertFrom-V2024JsonToDataAccessCategoriesInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024DataAccessCategoriesInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024DataAccessCategoriesInner
        $AllProperties = ("value", "matchCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matchCount"))) { #optional property not found
            $MatchCount = $null
        } else {
            $MatchCount = $JsonParameters.PSobject.Properties["matchCount"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "matchCount" = ${MatchCount}
        }

        return $PSO
    }

}

