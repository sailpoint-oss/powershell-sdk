#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A NestedConfig

.PARAMETER AncestorId
The unique identifier of the ancestor RightSet.
.PARAMETER Depth
The depth level of the configuration.
.PARAMETER ParentId
The unique identifier of the parent RightSet.
.PARAMETER ChildrenIds
List of unique identifiers for child configurations.
.OUTPUTS

NestedConfig<PSCustomObject>
#>

function Initialize-V2025NestedConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AncestorId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Depth},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ChildrenIds}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025NestedConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ancestorId" = ${AncestorId}
            "depth" = ${Depth}
            "parentId" = ${ParentId}
            "childrenIds" = ${ChildrenIds}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NestedConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to NestedConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NestedConfig<PSCustomObject>
#>
function ConvertFrom-V2025JsonToNestedConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025NestedConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025NestedConfig
        $AllProperties = ("ancestorId", "depth", "parentId", "childrenIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ancestorId"))) { #optional property not found
            $AncestorId = $null
        } else {
            $AncestorId = $JsonParameters.PSobject.Properties["ancestorId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "depth"))) { #optional property not found
            $Depth = $null
        } else {
            $Depth = $JsonParameters.PSobject.Properties["depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentId"))) { #optional property not found
            $ParentId = $null
        } else {
            $ParentId = $JsonParameters.PSobject.Properties["parentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "childrenIds"))) { #optional property not found
            $ChildrenIds = $null
        } else {
            $ChildrenIds = $JsonParameters.PSobject.Properties["childrenIds"].value
        }

        $PSO = [PSCustomObject]@{
            "ancestorId" = ${AncestorId}
            "depth" = ${Depth}
            "parentId" = ${ParentId}
            "childrenIds" = ${ChildrenIds}
        }

        return $PSO
    }

}

