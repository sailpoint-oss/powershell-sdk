#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
The number of identities in this role with the entitlement.
.PARAMETER IdentitiesWithAccess
The number of identities in this role with the entitlement.
.PARAMETER IdentitiesImpacted
The number of identities in this role that do not have the specified entitlement.
.PARAMETER TotalNumberOfIdentities
The total number of identities.
.PARAMETER ImpactedIdentityNames
No description available.
.OUTPUTS

RoleInsightsInsight<PSCustomObject>
#>

function Initialize-V2024RoleInsightsInsight {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IdentitiesWithAccess},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IdentitiesImpacted},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TotalNumberOfIdentities},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ImpactedIdentityNames}
    )

    Process {
        'Creating PSCustomObject: Tm.V2024 => V2024RoleInsightsInsight' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "identitiesWithAccess" = ${IdentitiesWithAccess}
            "identitiesImpacted" = ${IdentitiesImpacted}
            "totalNumberOfIdentities" = ${TotalNumberOfIdentities}
            "impactedIdentityNames" = ${ImpactedIdentityNames}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleInsightsInsight<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleInsightsInsight<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleInsightsInsight<PSCustomObject>
#>
function ConvertFrom-V2024JsonToRoleInsightsInsight {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.V2024 => V2024RoleInsightsInsight' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024RoleInsightsInsight
        $AllProperties = ("type", "identitiesWithAccess", "identitiesImpacted", "totalNumberOfIdentities", "impactedIdentityNames")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identitiesWithAccess"))) { #optional property not found
            $IdentitiesWithAccess = $null
        } else {
            $IdentitiesWithAccess = $JsonParameters.PSobject.Properties["identitiesWithAccess"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identitiesImpacted"))) { #optional property not found
            $IdentitiesImpacted = $null
        } else {
            $IdentitiesImpacted = $JsonParameters.PSobject.Properties["identitiesImpacted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalNumberOfIdentities"))) { #optional property not found
            $TotalNumberOfIdentities = $null
        } else {
            $TotalNumberOfIdentities = $JsonParameters.PSobject.Properties["totalNumberOfIdentities"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "impactedIdentityNames"))) { #optional property not found
            $ImpactedIdentityNames = $null
        } else {
            $ImpactedIdentityNames = $JsonParameters.PSobject.Properties["impactedIdentityNames"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "identitiesWithAccess" = ${IdentitiesWithAccess}
            "identitiesImpacted" = ${IdentitiesImpacted}
            "totalNumberOfIdentities" = ${TotalNumberOfIdentities}
            "impactedIdentityNames" = ${ImpactedIdentityNames}
        }

        return $PSO
    }

}

