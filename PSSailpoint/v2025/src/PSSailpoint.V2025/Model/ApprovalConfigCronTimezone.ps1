#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Timezone configuration for cron schedules.

.PARAMETER Location
Timezone location for cron schedules.
.PARAMETER Offset
Timezone offset for cron schedules.
.OUTPUTS

ApprovalConfigCronTimezone<PSCustomObject>
#>

function Initialize-V2025ApprovalConfigCronTimezone {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Location},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Offset}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025ApprovalConfigCronTimezone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "location" = ${Location}
            "offset" = ${Offset}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApprovalConfigCronTimezone<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApprovalConfigCronTimezone<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApprovalConfigCronTimezone<PSCustomObject>
#>
function ConvertFrom-V2025JsonToApprovalConfigCronTimezone {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025ApprovalConfigCronTimezone' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025ApprovalConfigCronTimezone
        $AllProperties = ("location", "offset")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offset"))) { #optional property not found
            $Offset = $null
        } else {
            $Offset = $JsonParameters.PSobject.Properties["offset"].value
        }

        $PSO = [PSCustomObject]@{
            "location" = ${Location}
            "offset" = ${Offset}
        }

        return $PSO
    }

}

