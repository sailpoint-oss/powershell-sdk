#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This API initialize a Bulk update by Id request of Role metadata. The maximum role count in a single update request is 3000. The maximum meta data values that one single role assigned can not exceed 25. Custom metadata need suit licensed.

.PARAMETER Roles
Roles' Id to be updated
.PARAMETER Operation
The operation to be performed
.PARAMETER ReplaceScope
The choice of update scope.
.PARAMETER Values
The metadata to be updated, including attribute key and value.
.OUTPUTS

RoleMetadataBulkUpdateByIdRequest<PSCustomObject>
#>

function Initialize-V2024RoleMetadataBulkUpdateByIdRequest {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Roles},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ADD", "REMOVE", "REPLACE")]
        [String]
        ${Operation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ALL", "ATTRIBUTE")]
        [String]
        ${ReplaceScope},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Values}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024RoleMetadataBulkUpdateByIdRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Roles) {
            throw "invalid value for 'Roles', 'Roles' cannot be null."
        }

        if (!$Operation) {
            throw "invalid value for 'Operation', 'Operation' cannot be null."
        }

        if (!$Values) {
            throw "invalid value for 'Values', 'Values' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "roles" = ${Roles}
            "operation" = ${Operation}
            "replaceScope" = ${ReplaceScope}
            "values" = ${Values}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleMetadataBulkUpdateByIdRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleMetadataBulkUpdateByIdRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleMetadataBulkUpdateByIdRequest<PSCustomObject>
#>
function ConvertFrom-V2024JsonToRoleMetadataBulkUpdateByIdRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024RoleMetadataBulkUpdateByIdRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024RoleMetadataBulkUpdateByIdRequest
        $AllProperties = ("roles", "operation", "replaceScope", "values")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'roles' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roles"))) {
            throw "Error! JSON cannot be serialized due to the required property 'roles' missing."
        } else {
            $Roles = $JsonParameters.PSobject.Properties["roles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation"))) {
            throw "Error! JSON cannot be serialized due to the required property 'operation' missing."
        } else {
            $Operation = $JsonParameters.PSobject.Properties["operation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "values"))) {
            throw "Error! JSON cannot be serialized due to the required property 'values' missing."
        } else {
            $Values = $JsonParameters.PSobject.Properties["values"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replaceScope"))) { #optional property not found
            $ReplaceScope = $null
        } else {
            $ReplaceScope = $JsonParameters.PSobject.Properties["replaceScope"].value
        }

        $PSO = [PSCustomObject]@{
            "roles" = ${Roles}
            "operation" = ${Operation}
            "replaceScope" = ${ReplaceScope}
            "values" = ${Values}
        }

        return $PSO
    }

}

