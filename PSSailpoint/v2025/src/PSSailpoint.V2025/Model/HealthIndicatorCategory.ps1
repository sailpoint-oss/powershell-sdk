#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Health indicator category data with errors and warnings

.PARAMETER Errors
List of error events for this category
.PARAMETER Warnings
List of warning events for this category
.OUTPUTS

HealthIndicatorCategory<PSCustomObject>
#>

function Initialize-V2025HealthIndicatorCategory {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Errors},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Warnings}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025HealthIndicatorCategory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HealthIndicatorCategory<PSCustomObject>

.DESCRIPTION

Convert from JSON to HealthIndicatorCategory<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HealthIndicatorCategory<PSCustomObject>
#>
function ConvertFrom-V2025JsonToHealthIndicatorCategory {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025HealthIndicatorCategory' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025HealthIndicatorCategory
        $AllProperties = ("errors", "warnings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errors"))) { #optional property not found
            $Errors = $null
        } else {
            $Errors = $JsonParameters.PSobject.Properties["errors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnings"))) { #optional property not found
            $Warnings = $null
        } else {
            $Warnings = $JsonParameters.PSobject.Properties["warnings"].value
        }

        $PSO = [PSCustomObject]@{
            "errors" = ${Errors}
            "warnings" = ${Warnings}
        }

        return $PSO
    }

}

