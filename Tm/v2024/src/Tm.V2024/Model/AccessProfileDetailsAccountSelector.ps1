#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

How to select account when there are multiple accounts for the user

.PARAMETER Selectors
No description available.
.OUTPUTS

AccessProfileDetailsAccountSelector<PSCustomObject>
#>

function Initialize-V2024AccessProfileDetailsAccountSelector {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Selectors}
    )

    Process {
        'Creating PSCustomObject: Tm.V2024 => V2024AccessProfileDetailsAccountSelector' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "selectors" = ${Selectors}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessProfileDetailsAccountSelector<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessProfileDetailsAccountSelector<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessProfileDetailsAccountSelector<PSCustomObject>
#>
function ConvertFrom-V2024JsonToAccessProfileDetailsAccountSelector {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.V2024 => V2024AccessProfileDetailsAccountSelector' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024AccessProfileDetailsAccountSelector
        $AllProperties = ("selectors")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "selectors"))) { #optional property not found
            $Selectors = $null
        } else {
            $Selectors = $JsonParameters.PSobject.Properties["selectors"].value
        }

        $PSO = [PSCustomObject]@{
            "selectors" = ${Selectors}
        }

        return $PSO
    }

}

