#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The response body of a Reassignment Configuration for a single identity

.PARAMETER Identity
No description available.
.PARAMETER ConfigDetails
Details of how work should be reassigned for an Identity
.OUTPUTS

ConfigurationItemResponse<PSCustomObject>
#>

function Initialize-BetaConfigurationItemResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Identity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ConfigDetails}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaConfigurationItemResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "identity" = ${Identity}
            "configDetails" = ${ConfigDetails}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConfigurationItemResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConfigurationItemResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConfigurationItemResponse<PSCustomObject>
#>
function ConvertFrom-BetaJsonToConfigurationItemResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaConfigurationItemResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaConfigurationItemResponse
        $AllProperties = ("identity", "configDetails")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identity"))) { #optional property not found
            $Identity = $null
        } else {
            $Identity = $JsonParameters.PSobject.Properties["identity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configDetails"))) { #optional property not found
            $ConfigDetails = $null
        } else {
            $ConfigDetails = $JsonParameters.PSobject.Properties["configDetails"].value
        }

        $PSO = [PSCustomObject]@{
            "identity" = ${Identity}
            "configDetails" = ${ConfigDetails}
        }

        return $PSO
    }

}

