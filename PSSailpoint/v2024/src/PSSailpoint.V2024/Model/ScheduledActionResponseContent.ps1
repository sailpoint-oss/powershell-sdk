#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Content details for the scheduled action.

.PARAMETER Name
Name of the scheduled action (maximum 50 characters).
.PARAMETER BackupOptions
No description available.
.PARAMETER SourceBackupId
ID of the source backup. Required for CREATE_DRAFT jobs only.
.PARAMETER SourceTenant
Source tenant identifier. Required for CREATE_DRAFT jobs only.
.PARAMETER DraftId
ID of the draft to be deployed. Required for CONFIG_DEPLOY_DRAFT jobs only.
.OUTPUTS

ScheduledActionResponseContent<PSCustomObject>
#>

function Initialize-V2024ScheduledActionResponseContent {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${BackupOptions},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceBackupId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceTenant},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DraftId}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024ScheduledActionResponseContent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 50) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 50."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "backupOptions" = ${BackupOptions}
            "sourceBackupId" = ${SourceBackupId}
            "sourceTenant" = ${SourceTenant}
            "draftId" = ${DraftId}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ScheduledActionResponseContent<PSCustomObject>

.DESCRIPTION

Convert from JSON to ScheduledActionResponseContent<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ScheduledActionResponseContent<PSCustomObject>
#>
function ConvertFrom-V2024JsonToScheduledActionResponseContent {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024ScheduledActionResponseContent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024ScheduledActionResponseContent
        $AllProperties = ("name", "backupOptions", "sourceBackupId", "sourceTenant", "draftId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backupOptions"))) { #optional property not found
            $BackupOptions = $null
        } else {
            $BackupOptions = $JsonParameters.PSobject.Properties["backupOptions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceBackupId"))) { #optional property not found
            $SourceBackupId = $null
        } else {
            $SourceBackupId = $JsonParameters.PSobject.Properties["sourceBackupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceTenant"))) { #optional property not found
            $SourceTenant = $null
        } else {
            $SourceTenant = $JsonParameters.PSobject.Properties["sourceTenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "draftId"))) { #optional property not found
            $DraftId = $null
        } else {
            $DraftId = $JsonParameters.PSobject.Properties["draftId"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "backupOptions" = ${BackupOptions}
            "sourceBackupId" = ${SourceBackupId}
            "sourceTenant" = ${SourceTenant}
            "draftId" = ${DraftId}
        }

        return $PSO
    }

}

