#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
name of branding item
.PARAMETER ProductName
product name
.PARAMETER ActionButtonColor
hex value of color for action button
.PARAMETER ActiveLinkColor
hex value of color for link
.PARAMETER NavigationColor
hex value of color for navigation bar
.PARAMETER EmailFromAddress
email from address
.PARAMETER StandardLogoURL
url to standard logo
.PARAMETER LoginInformationalMessage
login information message
.OUTPUTS

BrandingItem<PSCustomObject>
#>

function Initialize-BrandingItem {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProductName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionButtonColor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActiveLinkColor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NavigationColor},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailFromAddress},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StandardLogoURL},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoginInformationalMessage}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => BrandingItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "productName" = ${ProductName}
            "actionButtonColor" = ${ActionButtonColor}
            "activeLinkColor" = ${ActiveLinkColor}
            "navigationColor" = ${NavigationColor}
            "emailFromAddress" = ${EmailFromAddress}
            "standardLogoURL" = ${StandardLogoURL}
            "loginInformationalMessage" = ${LoginInformationalMessage}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BrandingItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to BrandingItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BrandingItem<PSCustomObject>
#>
function ConvertFrom-JsonToBrandingItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => BrandingItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BrandingItem
        $AllProperties = ("name", "productName", "actionButtonColor", "activeLinkColor", "navigationColor", "emailFromAddress", "standardLogoURL", "loginInformationalMessage")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "productName"))) { #optional property not found
            $ProductName = $null
        } else {
            $ProductName = $JsonParameters.PSobject.Properties["productName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionButtonColor"))) { #optional property not found
            $ActionButtonColor = $null
        } else {
            $ActionButtonColor = $JsonParameters.PSobject.Properties["actionButtonColor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeLinkColor"))) { #optional property not found
            $ActiveLinkColor = $null
        } else {
            $ActiveLinkColor = $JsonParameters.PSobject.Properties["activeLinkColor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "navigationColor"))) { #optional property not found
            $NavigationColor = $null
        } else {
            $NavigationColor = $JsonParameters.PSobject.Properties["navigationColor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailFromAddress"))) { #optional property not found
            $EmailFromAddress = $null
        } else {
            $EmailFromAddress = $JsonParameters.PSobject.Properties["emailFromAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standardLogoURL"))) { #optional property not found
            $StandardLogoURL = $null
        } else {
            $StandardLogoURL = $JsonParameters.PSobject.Properties["standardLogoURL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginInformationalMessage"))) { #optional property not found
            $LoginInformationalMessage = $null
        } else {
            $LoginInformationalMessage = $JsonParameters.PSobject.Properties["loginInformationalMessage"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "productName" = ${ProductName}
            "actionButtonColor" = ${ActionButtonColor}
            "activeLinkColor" = ${ActiveLinkColor}
            "navigationColor" = ${NavigationColor}
            "emailFromAddress" = ${EmailFromAddress}
            "standardLogoURL" = ${StandardLogoURL}
            "loginInformationalMessage" = ${LoginInformationalMessage}
        }

        return $PSO
    }

}

