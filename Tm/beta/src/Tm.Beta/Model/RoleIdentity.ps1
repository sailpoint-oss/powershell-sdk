#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A subset of the fields of an Identity which is a member of a Role.

.PARAMETER Id
The ID of the Identity
.PARAMETER AliasName
The alias / username of the Identity
.PARAMETER Name
The human-readable display name of the Identity
.PARAMETER Email
Email address of the Identity
.PARAMETER RoleAssignmentSource
No description available.
.OUTPUTS

RoleIdentity<PSCustomObject>
#>

function Initialize-BetaRoleIdentity {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AliasName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACCESS_REQUEST", "ROLE_MEMBERSHIP")]
        [PSCustomObject]
        ${RoleAssignmentSource}
    )

    Process {
        'Creating PSCustomObject: Tm.Beta => BetaRoleIdentity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "aliasName" = ${AliasName}
            "name" = ${Name}
            "email" = ${Email}
            "roleAssignmentSource" = ${RoleAssignmentSource}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleIdentity<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleIdentity<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleIdentity<PSCustomObject>
#>
function ConvertFrom-BetaJsonToRoleIdentity {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.Beta => BetaRoleIdentity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaRoleIdentity
        $AllProperties = ("id", "aliasName", "name", "email", "roleAssignmentSource")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "aliasName"))) { #optional property not found
            $AliasName = $null
        } else {
            $AliasName = $JsonParameters.PSobject.Properties["aliasName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roleAssignmentSource"))) { #optional property not found
            $RoleAssignmentSource = $null
        } else {
            $RoleAssignmentSource = $JsonParameters.PSobject.Properties["roleAssignmentSource"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "aliasName" = ${AliasName}
            "name" = ${Name}
            "email" = ${Email}
            "roleAssignmentSource" = ${RoleAssignmentSource}
        }

        return $PSO
    }

}

