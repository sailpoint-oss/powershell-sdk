#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Connector specific configuration. This configuration will differ for Multi-Host Integration type.

.PARAMETER MaxAllowedSources
Maximum sources allowed count of a Multi-Host Integration
.PARAMETER LastSourceUploadCount
Last upload sources count of a Multi-Host Integration
.PARAMETER ConnectorFileUploadHistory
No description available.
.PARAMETER MultihostStatus
Multi-Host integration status.
.PARAMETER ShowAccountSchema
Show account schema
.PARAMETER ShowEntitlementSchema
Show entitlement schema
.PARAMETER MultiHostAttributes
No description available.
.OUTPUTS

MultiHostIntegrationsConnectorAttributes<PSCustomObject>
#>

function Initialize-V2024MultiHostIntegrationsConnectorAttributes {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxAllowedSources},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LastSourceUploadCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConnectorFileUploadHistory},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ready", "processing", "fileUploadInProgress", "sourceCreationInProgress", "aggregationGroupingInProgress", "aggregationScheduleInProgress", "deleteInProgress", "deleteFailed")]
        [String]
        ${MultihostStatus},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShowAccountSchema} = $true,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShowEntitlementSchema} = $true,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MultiHostAttributes}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024MultiHostIntegrationsConnectorAttributes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "maxAllowedSources" = ${MaxAllowedSources}
            "lastSourceUploadCount" = ${LastSourceUploadCount}
            "connectorFileUploadHistory" = ${ConnectorFileUploadHistory}
            "multihost_status" = ${MultihostStatus}
            "showAccountSchema" = ${ShowAccountSchema}
            "showEntitlementSchema" = ${ShowEntitlementSchema}
            "multiHostAttributes" = ${MultiHostAttributes}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MultiHostIntegrationsConnectorAttributes<PSCustomObject>

.DESCRIPTION

Convert from JSON to MultiHostIntegrationsConnectorAttributes<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MultiHostIntegrationsConnectorAttributes<PSCustomObject>
#>
function ConvertFrom-V2024JsonToMultiHostIntegrationsConnectorAttributes {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024MultiHostIntegrationsConnectorAttributes' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json
        $V2024MultiHostIntegrationsConnectorAttributesAdditionalProperties = @{}

        # check if Json contains properties not defined in V2024MultiHostIntegrationsConnectorAttributes
        $AllProperties = ("maxAllowedSources", "lastSourceUploadCount", "connectorFileUploadHistory", "multihost_status", "showAccountSchema", "showEntitlementSchema", "multiHostAttributes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            # store undefined properties in additionalProperties
            if (!($AllProperties.Contains($name))) {
                $V2024MultiHostIntegrationsConnectorAttributesAdditionalProperties[$name] = $JsonParameters.PSobject.Properties[$name].value
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxAllowedSources"))) { #optional property not found
            $MaxAllowedSources = $null
        } else {
            $MaxAllowedSources = $JsonParameters.PSobject.Properties["maxAllowedSources"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastSourceUploadCount"))) { #optional property not found
            $LastSourceUploadCount = $null
        } else {
            $LastSourceUploadCount = $JsonParameters.PSobject.Properties["lastSourceUploadCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connectorFileUploadHistory"))) { #optional property not found
            $ConnectorFileUploadHistory = $null
        } else {
            $ConnectorFileUploadHistory = $JsonParameters.PSobject.Properties["connectorFileUploadHistory"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multihost_status"))) { #optional property not found
            $MultihostStatus = $null
        } else {
            $MultihostStatus = $JsonParameters.PSobject.Properties["multihost_status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "showAccountSchema"))) { #optional property not found
            $ShowAccountSchema = $null
        } else {
            $ShowAccountSchema = $JsonParameters.PSobject.Properties["showAccountSchema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "showEntitlementSchema"))) { #optional property not found
            $ShowEntitlementSchema = $null
        } else {
            $ShowEntitlementSchema = $JsonParameters.PSobject.Properties["showEntitlementSchema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiHostAttributes"))) { #optional property not found
            $MultiHostAttributes = $null
        } else {
            $MultiHostAttributes = $JsonParameters.PSobject.Properties["multiHostAttributes"].value
        }

        $PSO = [PSCustomObject]@{
            "maxAllowedSources" = ${MaxAllowedSources}
            "lastSourceUploadCount" = ${LastSourceUploadCount}
            "connectorFileUploadHistory" = ${ConnectorFileUploadHistory}
            "multihost_status" = ${MultihostStatus}
            "showAccountSchema" = ${ShowAccountSchema}
            "showEntitlementSchema" = ${ShowEntitlementSchema}
            "multiHostAttributes" = ${MultiHostAttributes}
            "AdditionalProperties" = $V2024MultiHostIntegrationsConnectorAttributesAdditionalProperties
        }

        return $PSO
    }

}

