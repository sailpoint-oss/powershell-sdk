#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Specifies which hour(s) a schedule is active for. Examples:  Every three hours starting from 8AM, inclusive: * type LIST * values ""8"" * interval 3  During business hours: * type RANGE * values ""9"", ""5""  At 5AM, noon, and 5PM: * type LIST * values ""5"", ""12"", ""17"" 

.PARAMETER Type
Enum type to specify hours value
.PARAMETER Values
Values of the days based on the enum type mentioned above
.PARAMETER Interval
Interval between the cert generations
.OUTPUTS

ScheduleHours<PSCustomObject>
#>

function Initialize-V2024ScheduleHours {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("LIST", "RANGE")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Values},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Interval}
    )

    Process {
        'Creating PSCustomObject: Tm.V2024 => V2024ScheduleHours' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if (!$Values) {
            throw "invalid value for 'Values', 'Values' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "values" = ${Values}
            "interval" = ${Interval}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ScheduleHours<PSCustomObject>

.DESCRIPTION

Convert from JSON to ScheduleHours<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ScheduleHours<PSCustomObject>
#>
function ConvertFrom-V2024JsonToScheduleHours {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.V2024 => V2024ScheduleHours' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024ScheduleHours
        $AllProperties = ("type", "values", "interval")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "values"))) {
            throw "Error! JSON cannot be serialized due to the required property 'values' missing."
        } else {
            $Values = $JsonParameters.PSobject.Properties["values"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interval"))) { #optional property not found
            $Interval = $null
        } else {
            $Interval = $JsonParameters.PSobject.Properties["interval"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "values" = ${Values}
            "interval" = ${Interval}
        }

        return $PSO
    }

}

