#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This content type is provided for compatibility with services that don't support multipart/form-data, such as SailPoint Workflows. This content type does not support files, so it can only be used for direct connect sources.

.PARAMETER DisableOptimization
Use this flag to reprocess every account whether or not the data has changed.
.OUTPUTS

ImportAccountsRequest1<PSCustomObject>
#>

function Initialize-BetaImportAccountsRequest1 {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("true", "false")]
        [String]
        ${DisableOptimization}
    )

    Process {
        'Creating PSCustomObject: Tm.Beta => BetaImportAccountsRequest1' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "disableOptimization" = ${DisableOptimization}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImportAccountsRequest1<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImportAccountsRequest1<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImportAccountsRequest1<PSCustomObject>
#>
function ConvertFrom-BetaJsonToImportAccountsRequest1 {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.Beta => BetaImportAccountsRequest1' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaImportAccountsRequest1
        $AllProperties = ("disableOptimization")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disableOptimization"))) { #optional property not found
            $DisableOptimization = $null
        } else {
            $DisableOptimization = $JsonParameters.PSobject.Properties["disableOptimization"].value
        }

        $PSO = [PSCustomObject]@{
            "disableOptimization" = ${DisableOptimization}
        }

        return $PSO
    }

}

