#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Suggested Entitlement Description

.PARAMETER Name
name of the entitlement
.PARAMETER ApprovedBy
entitlement approved by
.PARAMETER ApprovedType
entitlement approved type
.PARAMETER ApprovedWhen
entitlement approved then
.PARAMETER Attribute
entitlement attribute
.PARAMETER Description
description of entitlement
.PARAMETER DisplayName
entitlement display name
.PARAMETER Id
sed id
.PARAMETER SourceId
entitlement source id
.PARAMETER SourceName
entitlement source name
.PARAMETER Status
entitlement status
.PARAMETER SuggestedDescription
llm suggested entitlement description
.PARAMETER Type
entitlement type
.PARAMETER Value
entitlement value
.OUTPUTS

Sed<PSCustomObject>
#>

function Initialize-V2025Sed {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApprovedBy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApprovedType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ApprovedWhen},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Attribute},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SuggestedDescription},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025Sed' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "Name" = ${Name}
            "approved_by" = ${ApprovedBy}
            "approved_type" = ${ApprovedType}
            "approved_when" = ${ApprovedWhen}
            "attribute" = ${Attribute}
            "description" = ${Description}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "sourceId" = ${SourceId}
            "sourceName" = ${SourceName}
            "status" = ${Status}
            "suggestedDescription" = ${SuggestedDescription}
            "type" = ${Type}
            "value" = ${Value}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Sed<PSCustomObject>

.DESCRIPTION

Convert from JSON to Sed<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Sed<PSCustomObject>
#>
function ConvertFrom-V2025JsonToSed {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025Sed' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025Sed
        $AllProperties = ("Name", "approved_by", "approved_type", "approved_when", "attribute", "description", "displayName", "id", "sourceId", "sourceName", "status", "suggestedDescription", "type", "value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "Name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["Name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approved_by"))) { #optional property not found
            $ApprovedBy = $null
        } else {
            $ApprovedBy = $JsonParameters.PSobject.Properties["approved_by"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approved_type"))) { #optional property not found
            $ApprovedType = $null
        } else {
            $ApprovedType = $JsonParameters.PSobject.Properties["approved_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approved_when"))) { #optional property not found
            $ApprovedWhen = $null
        } else {
            $ApprovedWhen = $JsonParameters.PSobject.Properties["approved_when"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attribute"))) { #optional property not found
            $Attribute = $null
        } else {
            $Attribute = $JsonParameters.PSobject.Properties["attribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceName"))) { #optional property not found
            $SourceName = $null
        } else {
            $SourceName = $JsonParameters.PSobject.Properties["sourceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "suggestedDescription"))) { #optional property not found
            $SuggestedDescription = $null
        } else {
            $SuggestedDescription = $JsonParameters.PSobject.Properties["suggestedDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "Name" = ${Name}
            "approved_by" = ${ApprovedBy}
            "approved_type" = ${ApprovedType}
            "approved_when" = ${ApprovedWhen}
            "attribute" = ${Attribute}
            "description" = ${Description}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "sourceId" = ${SourceId}
            "sourceName" = ${SourceName}
            "status" = ${Status}
            "suggestedDescription" = ${SuggestedDescription}
            "type" = ${Type}
            "value" = ${Value}
        }

        return $PSO
    }

}

