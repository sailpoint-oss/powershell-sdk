#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Configuration for escalations.

.PARAMETER Enabled
Indicates if escalations are enabled.
.PARAMETER DaysUntilFirstEscalation
Number of days until the first escalation.
.PARAMETER EscalationCronSchedule
Cron schedule for escalations.
.PARAMETER EscalationChain
Escalation chain configuration.
.OUTPUTS

ApprovalConfigEscalationConfig<PSCustomObject>
#>

function Initialize-V2025ApprovalConfigEscalationConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${DaysUntilFirstEscalation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EscalationCronSchedule},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${EscalationChain}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025ApprovalConfigEscalationConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "daysUntilFirstEscalation" = ${DaysUntilFirstEscalation}
            "escalationCronSchedule" = ${EscalationCronSchedule}
            "escalationChain" = ${EscalationChain}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApprovalConfigEscalationConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApprovalConfigEscalationConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApprovalConfigEscalationConfig<PSCustomObject>
#>
function ConvertFrom-V2025JsonToApprovalConfigEscalationConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025ApprovalConfigEscalationConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025ApprovalConfigEscalationConfig
        $AllProperties = ("enabled", "daysUntilFirstEscalation", "escalationCronSchedule", "escalationChain")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daysUntilFirstEscalation"))) { #optional property not found
            $DaysUntilFirstEscalation = $null
        } else {
            $DaysUntilFirstEscalation = $JsonParameters.PSobject.Properties["daysUntilFirstEscalation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "escalationCronSchedule"))) { #optional property not found
            $EscalationCronSchedule = $null
        } else {
            $EscalationCronSchedule = $JsonParameters.PSobject.Properties["escalationCronSchedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "escalationChain"))) { #optional property not found
            $EscalationChain = $null
        } else {
            $EscalationChain = $JsonParameters.PSobject.Properties["escalationChain"].value
        }

        $PSO = [PSCustomObject]@{
            "enabled" = ${Enabled}
            "daysUntilFirstEscalation" = ${DaysUntilFirstEscalation}
            "escalationCronSchedule" = ${EscalationCronSchedule}
            "escalationChain" = ${EscalationChain}
        }

        return $PSO
    }

}

