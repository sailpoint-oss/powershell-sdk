#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessType
the access item type. account in this case
.PARAMETER Id
the access item id
.PARAMETER NativeIdentity
the native identifier used to uniquely identify an acccount
.PARAMETER SourceName
the name of the source
.PARAMETER SourceId
the id of the source
.PARAMETER EntitlementCount
the number of entitlements the account will create
.PARAMETER DisplayName
the display name of the identity
.OUTPUTS

AccessItemAccountResponse<PSCustomObject>
#>

function Initialize-V2025AccessItemAccountResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NativeIdentity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EntitlementCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025AccessItemAccountResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "accessType" = ${AccessType}
            "id" = ${Id}
            "nativeIdentity" = ${NativeIdentity}
            "sourceName" = ${SourceName}
            "sourceId" = ${SourceId}
            "entitlementCount" = ${EntitlementCount}
            "displayName" = ${DisplayName}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessItemAccountResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessItemAccountResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessItemAccountResponse<PSCustomObject>
#>
function ConvertFrom-V2025JsonToAccessItemAccountResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025AccessItemAccountResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025AccessItemAccountResponse
        $AllProperties = ("accessType", "id", "nativeIdentity", "sourceName", "sourceId", "entitlementCount", "displayName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessType"))) { #optional property not found
            $AccessType = $null
        } else {
            $AccessType = $JsonParameters.PSobject.Properties["accessType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nativeIdentity"))) { #optional property not found
            $NativeIdentity = $null
        } else {
            $NativeIdentity = $JsonParameters.PSobject.Properties["nativeIdentity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceName"))) { #optional property not found
            $SourceName = $null
        } else {
            $SourceName = $JsonParameters.PSobject.Properties["sourceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entitlementCount"))) { #optional property not found
            $EntitlementCount = $null
        } else {
            $EntitlementCount = $JsonParameters.PSobject.Properties["entitlementCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        $PSO = [PSCustomObject]@{
            "accessType" = ${AccessType}
            "id" = ${Id}
            "nativeIdentity" = ${NativeIdentity}
            "sourceName" = ${SourceName}
            "sourceId" = ${SourceId}
            "entitlementCount" = ${EntitlementCount}
            "displayName" = ${DisplayName}
        }

        return $PSO
    }

}

