#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Batch properties if an approval is sent via batching.

.PARAMETER BatchId
ID of the batch
.PARAMETER BatchSize
How many approvals are going to be in this batch. Defaults to 1 if not provided.
.OUTPUTS

ApprovalBatch<PSCustomObject>
#>

function Initialize-V2024ApprovalBatch {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BatchId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BatchSize}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024ApprovalBatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "batchId" = ${BatchId}
            "batchSize" = ${BatchSize}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApprovalBatch<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApprovalBatch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApprovalBatch<PSCustomObject>
#>
function ConvertFrom-V2024JsonToApprovalBatch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024ApprovalBatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024ApprovalBatch
        $AllProperties = ("batchId", "batchSize")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "batchId"))) { #optional property not found
            $BatchId = $null
        } else {
            $BatchId = $JsonParameters.PSobject.Properties["batchId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "batchSize"))) { #optional property not found
            $BatchSize = $null
        } else {
            $BatchSize = $JsonParameters.PSobject.Properties["batchSize"].value
        }

        $PSO = [PSCustomObject]@{
            "batchId" = ${BatchId}
            "batchSize" = ${BatchSize}
        }

        return $PSO
    }

}

