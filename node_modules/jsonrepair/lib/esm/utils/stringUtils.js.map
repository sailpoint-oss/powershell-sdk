{"version":3,"file":"stringUtils.js","names":["codeSpace","codeNewline","codeTab","codeReturn","codeNonBreakingSpace","codeEnQuad","codeHairSpace","codeNarrowNoBreakSpace","codeMediumMathematicalSpace","codeIdeographicSpace","isHex","char","test","isDigit","isValidStringCharacter","isDelimiter","includes","isFunctionNameCharStart","isFunctionNameChar","regexUrlStart","regexUrlChar","isUnquotedStringDelimiter","isStartOfValue","isQuote","regexStartOfValue","isControlCharacter","isWhitespace","text","index","code","charCodeAt","isWhitespaceExceptNewline","isSpecialWhitespace","isDoubleQuoteLike","isSingleQuoteLike","isDoubleQuote","isSingleQuote","stripLastOccurrence","textToStrip","stripRemainingText","arguments","length","undefined","lastIndexOf","substring","insertBeforeLastWhitespace","textToInsert","removeAtIndex","start","count","endsWithCommaOrNewline"],"sources":["../../../src/utils/stringUtils.ts"],"sourcesContent":["const codeSpace = 0x20 // \" \"\nconst codeNewline = 0xa // \"\\n\"\nconst codeTab = 0x9 // \"\\t\"\nconst codeReturn = 0xd // \"\\r\"\nconst codeNonBreakingSpace = 0xa0\nconst codeEnQuad = 0x2000\nconst codeHairSpace = 0x200a\nconst codeNarrowNoBreakSpace = 0x202f\nconst codeMediumMathematicalSpace = 0x205f\nconst codeIdeographicSpace = 0x3000\n\nexport function isHex(char: string): boolean {\n  return /^[0-9A-Fa-f]$/.test(char)\n}\n\nexport function isDigit(char: string): boolean {\n  return char >= '0' && char <= '9'\n}\n\nexport function isValidStringCharacter(char: string): boolean {\n  // note that the valid range is between \\u{0020} and \\u{10ffff},\n  // but in JavaScript it is not possible to create a code point larger than\n  // \\u{10ffff}, so there is no need to test for that here.\n  return char >= '\\u0020'\n}\n\nexport function isDelimiter(char: string): boolean {\n  return ',:[]/{}()\\n+'.includes(char)\n}\n\nexport function isFunctionNameCharStart(char: string) {\n  return (\n    (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || char === '_' || char === '$'\n  )\n}\n\nexport function isFunctionNameChar(char: string) {\n  return (\n    (char >= 'a' && char <= 'z') ||\n    (char >= 'A' && char <= 'Z') ||\n    char === '_' ||\n    char === '$' ||\n    (char >= '0' && char <= '9')\n  )\n}\n\n// matches \"https://\" and other schemas\nexport const regexUrlStart = /^(http|https|ftp|mailto|file|data|irc):\\/\\/$/\n\n// matches all valid URL characters EXCEPT \"[\", \"]\", and \",\", since that are important JSON delimiters\nexport const regexUrlChar = /^[A-Za-z0-9-._~:/?#@!$&'()*+;=]$/\n\nexport function isUnquotedStringDelimiter(char: string): boolean {\n  return ',[]/{}\\n+'.includes(char)\n}\n\nexport function isStartOfValue(char: string): boolean {\n  return isQuote(char) || regexStartOfValue.test(char)\n}\n\n// alpha, number, minus, or opening bracket or brace\nconst regexStartOfValue = /^[[{\\w-]$/\n\nexport function isControlCharacter(char: string) {\n  return char === '\\n' || char === '\\r' || char === '\\t' || char === '\\b' || char === '\\f'\n}\n\nexport interface Text {\n  charCodeAt: (index: number) => number\n}\n\n/**\n * Check if the given character is a whitespace character like space, tab, or\n * newline\n */\nexport function isWhitespace(text: Text, index: number): boolean {\n  const code = text.charCodeAt(index)\n\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\n}\n\n/**\n * Check if the given character is a whitespace character like space or tab,\n * but NOT a newline\n */\nexport function isWhitespaceExceptNewline(text: Text, index: number): boolean {\n  const code = text.charCodeAt(index)\n\n  return code === codeSpace || code === codeTab || code === codeReturn\n}\n\n/**\n * Check if the given character is a special whitespace character, some\n * unicode variant\n */\nexport function isSpecialWhitespace(text: Text, index: number): boolean {\n  const code = text.charCodeAt(index)\n\n  return (\n    code === codeNonBreakingSpace ||\n    (code >= codeEnQuad && code <= codeHairSpace) ||\n    code === codeNarrowNoBreakSpace ||\n    code === codeMediumMathematicalSpace ||\n    code === codeIdeographicSpace\n  )\n}\n\n/**\n * Test whether the given character is a quote or double quote character.\n * Also tests for special variants of quotes.\n */\nexport function isQuote(char: string): boolean {\n  // the first check double quotes, since that occurs most often\n  return isDoubleQuoteLike(char) || isSingleQuoteLike(char)\n}\n\n/**\n * Test whether the given character is a double quote character.\n * Also tests for special variants of double quotes.\n */\nexport function isDoubleQuoteLike(char: string): boolean {\n  return char === '\"' || char === '\\u201c' || char === '\\u201d'\n}\n\n/**\n * Test whether the given character is a double quote character.\n * Does NOT test for special variants of double quotes.\n */\nexport function isDoubleQuote(char: string): boolean {\n  return char === '\"'\n}\n\n/**\n * Test whether the given character is a single quote character.\n * Also tests for special variants of single quotes.\n */\nexport function isSingleQuoteLike(char: string): boolean {\n  return (\n    char === \"'\" || char === '\\u2018' || char === '\\u2019' || char === '\\u0060' || char === '\\u00b4'\n  )\n}\n\n/**\n * Test whether the given character is a single quote character.\n * Does NOT test for special variants of single quotes.\n */\nexport function isSingleQuote(char: string): boolean {\n  return char === \"'\"\n}\n\n/**\n * Strip last occurrence of textToStrip from text\n */\nexport function stripLastOccurrence(\n  text: string,\n  textToStrip: string,\n  stripRemainingText = false\n): string {\n  const index = text.lastIndexOf(textToStrip)\n  return index !== -1\n    ? text.substring(0, index) + (stripRemainingText ? '' : text.substring(index + 1))\n    : text\n}\n\nexport function insertBeforeLastWhitespace(text: string, textToInsert: string): string {\n  let index = text.length\n\n  if (!isWhitespace(text, index - 1)) {\n    // no trailing whitespaces\n    return text + textToInsert\n  }\n\n  while (isWhitespace(text, index - 1)) {\n    index--\n  }\n\n  return text.substring(0, index) + textToInsert + text.substring(index)\n}\n\nexport function removeAtIndex(text: string, start: number, count: number) {\n  return text.substring(0, start) + text.substring(start + count)\n}\n\n/**\n * Test whether a string ends with a newline or comma character and optional whitespace\n */\nexport function endsWithCommaOrNewline(text: string): boolean {\n  return /[,\\n][ \\t\\r]*$/.test(text)\n}\n"],"mappings":"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","ignoreList":[]}