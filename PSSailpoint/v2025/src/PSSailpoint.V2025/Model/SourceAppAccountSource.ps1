#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
The source ID
.PARAMETER Type
The source type, will always be ""SOURCE""
.PARAMETER Name
The source name
.PARAMETER UseForPasswordManagement
If the source is used for password management
.PARAMETER PasswordPolicies
The password policies for the source
.OUTPUTS

SourceAppAccountSource<PSCustomObject>
#>

function Initialize-V2025SourceAppAccountSource {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseForPasswordManagement} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PasswordPolicies}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025SourceAppAccountSource' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "name" = ${Name}
            "useForPasswordManagement" = ${UseForPasswordManagement}
            "passwordPolicies" = ${PasswordPolicies}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SourceAppAccountSource<PSCustomObject>

.DESCRIPTION

Convert from JSON to SourceAppAccountSource<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SourceAppAccountSource<PSCustomObject>
#>
function ConvertFrom-V2025JsonToSourceAppAccountSource {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025SourceAppAccountSource' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025SourceAppAccountSource
        $AllProperties = ("id", "type", "name", "useForPasswordManagement", "passwordPolicies")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useForPasswordManagement"))) { #optional property not found
            $UseForPasswordManagement = $null
        } else {
            $UseForPasswordManagement = $JsonParameters.PSobject.Properties["useForPasswordManagement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordPolicies"))) { #optional property not found
            $PasswordPolicies = $null
        } else {
            $PasswordPolicies = $JsonParameters.PSobject.Properties["passwordPolicies"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "name" = ${Name}
            "useForPasswordManagement" = ${UseForPasswordManagement}
            "passwordPolicies" = ${PasswordPolicies}
        }

        return $PSO
    }

}

