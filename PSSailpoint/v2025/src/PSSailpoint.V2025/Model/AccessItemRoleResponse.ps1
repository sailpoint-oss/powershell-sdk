#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
the access item id
.PARAMETER AccessType
the access item type. role in this case
.PARAMETER DisplayName
the role display name
.PARAMETER SourceName
the associated source name if it exists
.PARAMETER Description
the description for the role
.PARAMETER RemoveDate
the date the role is no longer assigned to the specified identity
.PARAMETER Revocable
indicates whether the role is revocable
.OUTPUTS

AccessItemRoleResponse<PSCustomObject>
#>

function Initialize-V2025AccessItemRoleResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoveDate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Revocable}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025AccessItemRoleResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Revocable) {
            throw "invalid value for 'Revocable', 'Revocable' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "accessType" = ${AccessType}
            "displayName" = ${DisplayName}
            "sourceName" = ${SourceName}
            "description" = ${Description}
            "removeDate" = ${RemoveDate}
            "revocable" = ${Revocable}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessItemRoleResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessItemRoleResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessItemRoleResponse<PSCustomObject>
#>
function ConvertFrom-V2025JsonToAccessItemRoleResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025AccessItemRoleResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025AccessItemRoleResponse
        $AllProperties = ("id", "accessType", "displayName", "sourceName", "description", "removeDate", "revocable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'revocable' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revocable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'revocable' missing."
        } else {
            $Revocable = $JsonParameters.PSobject.Properties["revocable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessType"))) { #optional property not found
            $AccessType = $null
        } else {
            $AccessType = $JsonParameters.PSobject.Properties["accessType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceName"))) { #optional property not found
            $SourceName = $null
        } else {
            $SourceName = $JsonParameters.PSobject.Properties["sourceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removeDate"))) { #optional property not found
            $RemoveDate = $null
        } else {
            $RemoveDate = $JsonParameters.PSobject.Properties["removeDate"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "accessType" = ${AccessType}
            "displayName" = ${DisplayName}
            "sourceName" = ${SourceName}
            "description" = ${Description}
            "removeDate" = ${RemoveDate}
            "revocable" = ${Revocable}
        }

        return $PSO
    }

}

