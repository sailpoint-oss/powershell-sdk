#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

SED Approval Status

.PARAMETER FailedReason
failed reason will be display if status is failed
.PARAMETER Id
Sed id
.PARAMETER Status
SUCCESS | FAILED
.OUTPUTS

SedApprovalStatus<PSCustomObject>
#>

function Initialize-V2025SedApprovalStatus {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FailedReason},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025SedApprovalStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "failedReason" = ${FailedReason}
            "id" = ${Id}
            "status" = ${Status}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SedApprovalStatus<PSCustomObject>

.DESCRIPTION

Convert from JSON to SedApprovalStatus<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SedApprovalStatus<PSCustomObject>
#>
function ConvertFrom-V2025JsonToSedApprovalStatus {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025SedApprovalStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025SedApprovalStatus
        $AllProperties = ("failedReason", "id", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failedReason"))) { #optional property not found
            $FailedReason = $null
        } else {
            $FailedReason = $JsonParameters.PSobject.Properties["failedReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "failedReason" = ${FailedReason}
            "id" = ${Id}
            "status" = ${Status}
        }

        return $PSO
    }

}

