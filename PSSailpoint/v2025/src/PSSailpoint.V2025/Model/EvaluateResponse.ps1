#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The response body for Evaluate Reassignment Configuration

.PARAMETER ReassignToId
The Identity ID which should be the recipient of any work items sent to a specific identity & work type
.PARAMETER LookupTrail
List of Reassignments found by looking up the next `TargetIdentity` in a ReassignmentConfiguration
.OUTPUTS

EvaluateResponse<PSCustomObject>
#>

function Initialize-V2025EvaluateResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReassignToId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LookupTrail}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025EvaluateResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "reassignToId" = ${ReassignToId}
            "lookupTrail" = ${LookupTrail}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EvaluateResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to EvaluateResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EvaluateResponse<PSCustomObject>
#>
function ConvertFrom-V2025JsonToEvaluateResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025EvaluateResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025EvaluateResponse
        $AllProperties = ("reassignToId", "lookupTrail")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reassignToId"))) { #optional property not found
            $ReassignToId = $null
        } else {
            $ReassignToId = $JsonParameters.PSobject.Properties["reassignToId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lookupTrail"))) { #optional property not found
            $LookupTrail = $null
        } else {
            $LookupTrail = $JsonParameters.PSobject.Properties["lookupTrail"].value
        }

        $PSO = [PSCustomObject]@{
            "reassignToId" = ${ReassignToId}
            "lookupTrail" = ${LookupTrail}
        }

        return $PSO
    }

}

