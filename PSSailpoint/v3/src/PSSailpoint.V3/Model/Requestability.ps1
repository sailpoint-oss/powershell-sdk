#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CommentsRequired
Indicates whether the requester of the containing object must provide comments justifying the request.
.PARAMETER DenialCommentsRequired
Indicates whether an approver must provide comments when denying the request.
.PARAMETER ReauthorizationRequired
Indicates whether reauthorization is required for the request.
.PARAMETER ApprovalSchemes
List describing the steps involved in approving the request.
.OUTPUTS

Requestability<PSCustomObject>
#>

function Initialize-Requestability {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CommentsRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DenialCommentsRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReauthorizationRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ApprovalSchemes}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => Requestability' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "commentsRequired" = ${CommentsRequired}
            "denialCommentsRequired" = ${DenialCommentsRequired}
            "reauthorizationRequired" = ${ReauthorizationRequired}
            "approvalSchemes" = ${ApprovalSchemes}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Requestability<PSCustomObject>

.DESCRIPTION

Convert from JSON to Requestability<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Requestability<PSCustomObject>
#>
function ConvertFrom-JsonToRequestability {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => Requestability' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Requestability
        $AllProperties = ("commentsRequired", "denialCommentsRequired", "reauthorizationRequired", "approvalSchemes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commentsRequired"))) { #optional property not found
            $CommentsRequired = $null
        } else {
            $CommentsRequired = $JsonParameters.PSobject.Properties["commentsRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "denialCommentsRequired"))) { #optional property not found
            $DenialCommentsRequired = $null
        } else {
            $DenialCommentsRequired = $JsonParameters.PSobject.Properties["denialCommentsRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reauthorizationRequired"))) { #optional property not found
            $ReauthorizationRequired = $null
        } else {
            $ReauthorizationRequired = $JsonParameters.PSobject.Properties["reauthorizationRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvalSchemes"))) { #optional property not found
            $ApprovalSchemes = $null
        } else {
            $ApprovalSchemes = $JsonParameters.PSobject.Properties["approvalSchemes"].value
        }

        $PSO = [PSCustomObject]@{
            "commentsRequired" = ${CommentsRequired}
            "denialCommentsRequired" = ${DenialCommentsRequired}
            "reauthorizationRequired" = ${ReauthorizationRequired}
            "approvalSchemes" = ${ApprovalSchemes}
        }

        return $PSO
    }

}

