{"version":3,"file":"jsonrepair.js","names":["_JSONRepairError","require","_stringUtils","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepair","text","i","output","parseMarkdownCodeBlock","processed","parseValue","throwUnexpectedEnd","processedComma","parseCharacter","parseWhitespaceAndSkipComments","isStartOfValue","endsWithCommaOrNewline","insertBeforeLastWhitespace","parseNewlineDelimitedJSON","stripLastOccurrence","length","throwUnexpectedCharacter","parseObject","parseArray","parseString","parseNumber","parseKeywords","parseUnquotedString","parseRegex","skipNewline","arguments","undefined","start","changed","parseWhitespace","parseComment","_isWhiteSpace","isWhitespace","isWhitespaceExceptNewline","whitespace","isSpecialWhitespace","atEndOfBlockComment","slice","isFunctionNameCharStart","isFunctionNameChar","char","skipCharacter","skipEscapeCharacter","skipEllipsis","initial","processedKey","throwObjectKeyExpected","processedColon","truncatedText","throwColonExpected","processedValue","concat","stopAtDelimiter","stopAtIndex","skipEscapeChars","isQuote","isEndQuote","isDoubleQuote","isSingleQuote","isSingleQuoteLike","isDoubleQuoteLike","iBefore","oBefore","str","iPrev","prevNonWhitespaceIndex","isDelimiter","charAt","substring","iQuote","oQuote","isDigit","parseConcatenatedString","iPrevChar","prevChar","isUnquotedStringDelimiter","regexUrlStart","test","regexUrlChar","escapeChar","j","isHex","throwInvalidUnicodeCharacter","isControlCharacter","isValidStringCharacter","throwInvalidCharacter","parsedStr","removeAtIndex","atEndOfNumber","repairNumberEndingWithNumericSymbol","num","hasInvalidLeadingZero","parseKeyword","name","value","isKey","symbol","JSON","stringify","prev","JSONRepairError","chars"],"sources":["../../../src/regular/jsonrepair.ts"],"sourcesContent":["import { JSONRepairError } from '../utils/JSONRepairError.js'\nimport {\n  endsWithCommaOrNewline,\n  insertBeforeLastWhitespace,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isFunctionNameChar,\n  isFunctionNameCharStart,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isUnquotedStringDelimiter,\n  isValidStringCharacter,\n  isWhitespace,\n  isWhitespaceExceptNewline,\n  regexUrlChar,\n  regexUrlStart,\n  removeAtIndex,\n  stripLastOccurrence\n} from '../utils/stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\n/**\n * Repair a string containing an invalid JSON document.\n * For example changes JavaScript notation into JSON notation.\n *\n * Example:\n *\n *     try {\n *       const json = \"{name: 'John'}\"\n *       const repaired = jsonrepair(json)\n *       console.log(repaired)\n *       // '{\"name\": \"John\"}'\n *     } catch (err) {\n *       console.error(err)\n *     }\n *\n */\nexport function jsonrepair(text: string): string {\n  let i = 0 // current index in text\n  let output = '' // generated output\n\n  parseMarkdownCodeBlock()\n\n  const processed = parseValue()\n  if (!processed) {\n    throwUnexpectedEnd()\n  }\n\n  parseMarkdownCodeBlock()\n\n  const processedComma = parseCharacter(',')\n  if (processedComma) {\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (isStartOfValue(text[i]) && endsWithCommaOrNewline(output)) {\n    // start of a new value after end of the root level object: looks like\n    // newline delimited JSON -> turn into a root level array\n    if (!processedComma) {\n      // repair missing comma\n      output = insertBeforeLastWhitespace(output, ',')\n    }\n\n    parseNewlineDelimitedJSON()\n  } else if (processedComma) {\n    // repair: remove trailing comma\n    output = stripLastOccurrence(output, ',')\n  }\n\n  // repair redundant end quotes\n  while (text[i] === '}' || text[i] === ']') {\n    i++\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (i >= text.length) {\n    // reached the end of the document properly\n    return output\n  }\n\n  throwUnexpectedCharacter()\n\n  function parseValue(): boolean {\n    parseWhitespaceAndSkipComments()\n    const processed =\n      parseObject() ||\n      parseArray() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseUnquotedString(false) ||\n      parseRegex()\n    parseWhitespaceAndSkipComments()\n\n    return processed\n  }\n\n  function parseWhitespaceAndSkipComments(skipNewline = true): boolean {\n    const start = i\n\n    let changed = parseWhitespace(skipNewline)\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace(skipNewline)\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(skipNewline: boolean): boolean {\n    const _isWhiteSpace = skipNewline ? isWhitespace : isWhitespaceExceptNewline\n    let whitespace = ''\n\n    while (true) {\n      if (_isWhiteSpace(text, i)) {\n        whitespace += text[i]\n        i++\n      } else if (isSpecialWhitespace(text, i)) {\n        // repair special whitespace\n        whitespace += ' '\n        i++\n      } else {\n        break\n      }\n    }\n\n    if (whitespace.length > 0) {\n      output += whitespace\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (text[i] === '/' && text[i + 1] === '*') {\n      // repair block comment by skipping it\n      while (i < text.length && !atEndOfBlockComment(text, i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (text[i] === '/' && text[i + 1] === '/') {\n      // repair line comment by skipping it\n      while (i < text.length && text[i] !== '\\n') {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseMarkdownCodeBlock(): boolean {\n    // find and skip over a Markdown fenced code block:\n    //     ``` ... ```\n    // or\n    //     ```json ... ```\n    if (text.slice(i, i + 3) === '```') {\n      i += 3\n\n      if (isFunctionNameCharStart(text[i])) {\n        // strip the optional language specifier like \"json\"\n        while (i < text.length && isFunctionNameChar(text[i])) {\n          i++\n        }\n      }\n\n      parseWhitespaceAndSkipComments()\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(char: string): boolean {\n    if (text[i] === char) {\n      output += text[i]\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(char: string): boolean {\n    if (text[i] === char) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter('\\\\')\n  }\n\n  /**\n   * Skip ellipsis like \"[1,2,3,...]\" or \"[1,2,3,...,9]\" or \"[...,7,8,9]\"\n   * or a similar construct in objects.\n   */\n  function skipEllipsis(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    if (text[i] === '.' && text[i + 1] === '.' && text[i + 2] === '.') {\n      // repair: remove the ellipsis (three dots) and optionally a comma\n      i += 3\n      parseWhitespaceAndSkipComments()\n      skipCharacter(',')\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an object like '{\"key\": \"value\"}'\n   */\n  function parseObject(): boolean {\n    if (text[i] === '{') {\n      output += '{'\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: skip leading comma like in {, message: \"hi\"}\n      if (skipCharacter(',')) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      let initial = true\n      while (i < text.length && text[i] !== '}') {\n        let processedComma: boolean\n        if (!initial) {\n          processedComma = parseCharacter(',')\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n          parseWhitespaceAndSkipComments()\n        } else {\n          processedComma = true\n          initial = false\n        }\n\n        skipEllipsis()\n\n        const processedKey = parseString() || parseUnquotedString(true)\n        if (!processedKey) {\n          if (\n            text[i] === '}' ||\n            text[i] === '{' ||\n            text[i] === ']' ||\n            text[i] === '[' ||\n            text[i] === undefined\n          ) {\n            // repair trailing comma\n            output = stripLastOccurrence(output, ',')\n          } else {\n            throwObjectKeyExpected()\n          }\n          break\n        }\n\n        parseWhitespaceAndSkipComments()\n        const processedColon = parseCharacter(':')\n        const truncatedText = i >= text.length\n        if (!processedColon) {\n          if (isStartOfValue(text[i]) || truncatedText) {\n            // repair missing colon\n            output = insertBeforeLastWhitespace(output, ':')\n          } else {\n            throwColonExpected()\n          }\n        }\n        const processedValue = parseValue()\n        if (!processedValue) {\n          if (processedColon || truncatedText) {\n            // repair missing object value\n            output += 'null'\n          } else {\n            throwColonExpected()\n          }\n        }\n      }\n\n      if (text[i] === '}') {\n        output += '}'\n        i++\n      } else {\n        // repair missing end bracket\n        output = insertBeforeLastWhitespace(output, '}')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an array like '[\"item1\", \"item2\", ...]'\n   */\n  function parseArray(): boolean {\n    if (text[i] === '[') {\n      output += '['\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: skip leading comma like in [,1,2,3]\n      if (skipCharacter(',')) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      let initial = true\n      while (i < text.length && text[i] !== ']') {\n        if (!initial) {\n          const processedComma = parseCharacter(',')\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n        } else {\n          initial = false\n        }\n\n        skipEllipsis()\n\n        const processedValue = parseValue()\n        if (!processedValue) {\n          // repair trailing comma\n          output = stripLastOccurrence(output, ',')\n          break\n        }\n      }\n\n      if (text[i] === ']') {\n        output += ']'\n        i++\n      } else {\n        // repair missing closing array bracket\n        output = insertBeforeLastWhitespace(output, ']')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse and repair Newline Delimited JSON (NDJSON):\n   * multiple JSON objects separated by a newline character\n   */\n  function parseNewlineDelimitedJSON() {\n    // repair NDJSON\n    let initial = true\n    let processedValue = true\n    while (processedValue) {\n      if (!initial) {\n        // parse optional comma, insert when missing\n        const processedComma = parseCharacter(',')\n        if (!processedComma) {\n          // repair: add missing comma\n          output = insertBeforeLastWhitespace(output, ',')\n        }\n      } else {\n        initial = false\n      }\n\n      processedValue = parseValue()\n    }\n\n    if (!processedValue) {\n      // repair: remove trailing comma\n      output = stripLastOccurrence(output, ',')\n    }\n\n    // repair: wrap the output inside array brackets\n    output = `[\\n${output}\\n]`\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there, or stopping at a\n   *   stop index detected in the first iteration.\n   */\n  function parseString(stopAtDelimiter = false, stopAtIndex = -1): boolean {\n    let skipEscapeChars = text[i] === '\\\\'\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(text[i])) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(text[i])\n        ? isDoubleQuote\n        : isSingleQuote(text[i])\n          ? isSingleQuote\n          : isSingleQuoteLike(text[i])\n            ? isSingleQuoteLike\n            : isDoubleQuoteLike\n\n      const iBefore = i\n      const oBefore = output.length\n\n      let str = '\"'\n      i++\n\n      while (true) {\n        if (i >= text.length) {\n          // end of text, we are missing an end quote\n\n          const iPrev = prevNonWhitespaceIndex(i - 1)\n          if (!stopAtDelimiter && isDelimiter(text.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(true)\n          }\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          return true\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (i === stopAtIndex) {\n          // use the stop index detected in the first iteration, and repair end quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          return true\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (isEndQuote(text[i])) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i\n          const oQuote = str.length\n          str += '\"'\n          i++\n          output += str\n\n          parseWhitespaceAndSkipComments(false)\n\n          if (\n            stopAtDelimiter ||\n            i >= text.length ||\n            isDelimiter(text[i]) ||\n            isQuote(text[i]) ||\n            isDigit(text[i])\n          ) {\n            // The quote is followed by the end of the text, a delimiter,\n            // or a next value. So the quote is indeed the end of the string.\n            parseConcatenatedString()\n\n            return true\n          }\n\n          const iPrevChar = prevNonWhitespaceIndex(iQuote - 1)\n          const prevChar = text.charAt(iPrevChar)\n\n          if (prevChar === ',') {\n            // A comma followed by a quote, like '{\"a\":\"b,c,\"d\":\"e\"}'.\n            // We assume that the quote is a start quote, and that the end quote\n            // should have been located right before the comma but is missing.\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(false, iPrevChar)\n          }\n\n          if (isDelimiter(prevChar)) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(true)\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output = output.substring(0, oBefore)\n          i = iQuote + 1\n\n          // repair unescaped quote\n          str = `${str.substring(0, oQuote)}\\\\${str.substring(oQuote)}`\n        } else if (stopAtDelimiter && isUnquotedStringDelimiter(text[i])) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // test start of an url like \"https://...\" (this would be parsed as a comment)\n          if (text[i - 1] === ':' && regexUrlStart.test(text.substring(iBefore + 1, i + 2))) {\n            while (i < text.length && regexUrlChar.test(text[i])) {\n              str += text[i]\n              i++\n            }\n          }\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          parseConcatenatedString()\n\n          return true\n        } else if (text[i] === '\\\\') {\n          // handle escaped content like \\n or \\u2605\n          const char = text.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            str += text.slice(i, i + 2)\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(text[i + j])) {\n              j++\n            }\n\n            if (j === 6) {\n              str += text.slice(i, i + 6)\n              i += 6\n            } else if (i + j >= text.length) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i = text.length\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            str += char\n            i += 2\n          }\n        } else {\n          // handle regular characters\n          const char = text.charAt(i)\n\n          if (char === '\"' && text[i - 1] !== '\\\\') {\n            // repair unescaped double quote\n            str += `\\\\${char}`\n            i++\n          } else if (isControlCharacter(char)) {\n            // unescaped control character\n            str += controlCharacters[char]\n            i++\n          } else {\n            if (!isValidStringCharacter(char)) {\n              throwInvalidCharacter(char)\n            }\n            str += char\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let processed = false\n\n    parseWhitespaceAndSkipComments()\n    while (text[i] === '+') {\n      processed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output = stripLastOccurrence(output, '\"', true)\n      const start = output.length\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output = removeAtIndex(output, start, 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output = insertBeforeLastWhitespace(output, '\"')\n      }\n    }\n\n    return processed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (text[i] === '-') {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text[i])) {\n        i = start\n        return false\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(text[i])) {\n      i++\n    }\n\n    if (text[i] === '.') {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text[i])) {\n        i = start\n        return false\n      }\n      while (isDigit(text[i])) {\n        i++\n      }\n    }\n\n    if (text[i] === 'e' || text[i] === 'E') {\n      i++\n      if (text[i] === '-' || text[i] === '+') {\n        i++\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text[i])) {\n        i = start\n        return false\n      }\n      while (isDigit(text[i])) {\n        i++\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start\n      return false\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = text.slice(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output += hasInvalidLeadingZero ? `\"${num}\"` : num\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (text.slice(i, i + name.length) === name) {\n      output += value\n      i += name.length\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair an unquoted string by adding quotes around it\n   * Repair a MongoDB function call like NumberLong(\"2\")\n   * Repair a JSONP function call like callback({...});\n   */\n  function parseUnquotedString(isKey: boolean) {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    const start = i\n\n    if (isFunctionNameCharStart(text[i])) {\n      while (i < text.length && isFunctionNameChar(text[i])) {\n        i++\n      }\n\n      let j = i\n      while (isWhitespace(text, j)) {\n        j++\n      }\n\n      if (text[j] === '(') {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        i = j + 1\n\n        parseValue()\n\n        if (text[i] === ')') {\n          // repair: skip close bracket of function call\n          i++\n          if (text[i] === ';') {\n            // repair: skip semicolon after JSONP call\n            i++\n          }\n        }\n\n        return true\n      }\n    }\n\n    while (\n      i < text.length &&\n      !isUnquotedStringDelimiter(text[i]) &&\n      !isQuote(text[i]) &&\n      (!isKey || text[i] !== ':')\n    ) {\n      i++\n    }\n\n    // test start of an url like \"https://...\" (this would be parsed as a comment)\n    if (text[i - 1] === ':' && regexUrlStart.test(text.substring(start, i + 2))) {\n      while (i < text.length && regexUrlChar.test(text[i])) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      // repair unquoted string\n      // also, repair undefined into null\n\n      // first, go back to prevent getting trailing whitespaces in the string\n      while (isWhitespace(text, i - 1) && i > 0) {\n        i--\n      }\n\n      const symbol = text.slice(start, i)\n      output += symbol === 'undefined' ? 'null' : JSON.stringify(symbol)\n\n      if (text[i] === '\"') {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return true\n    }\n  }\n\n  function parseRegex() {\n    if (text[i] === '/') {\n      const start = i\n      i++\n\n      while (i < text.length && (text[i] !== '/' || text[i - 1] === '\\\\')) {\n        i++\n      }\n      i++\n\n      output += `\"${text.substring(start, i)}\"`\n\n      return true\n    }\n  }\n\n  function prevNonWhitespaceIndex(start: number): number {\n    let prev = start\n\n    while (prev > 0 && isWhitespace(text, prev)) {\n      prev--\n    }\n\n    return prev\n  }\n\n  function atEndOfNumber() {\n    return i >= text.length || isDelimiter(text[i]) || isWhitespace(text, i)\n  }\n\n  function repairNumberEndingWithNumericSymbol(start: number) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output += `${text.slice(start, i)}0`\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError(`Invalid character ${JSON.stringify(char)}`, i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError(`Unexpected character ${JSON.stringify(text[i])}`, i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', text.length)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = text.slice(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n}\n\nfunction atEndOfBlockComment(text: string, i: number) {\n  return text[i] === '*' && text[i + 1] === '/'\n}\n"],"mappings":"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","ignoreList":[]}