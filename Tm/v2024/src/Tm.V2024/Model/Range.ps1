#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The range of values to be filtered.

.PARAMETER Lower
No description available.
.PARAMETER Upper
No description available.
.OUTPUTS

Range<PSCustomObject>
#>

function Initialize-V2024Range {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Lower},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Upper}
    )

    Process {
        'Creating PSCustomObject: Tm.V2024 => V2024Range' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "lower" = ${Lower}
            "upper" = ${Upper}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Range<PSCustomObject>

.DESCRIPTION

Convert from JSON to Range<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Range<PSCustomObject>
#>
function ConvertFrom-V2024JsonToRange {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.V2024 => V2024Range' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024Range
        $AllProperties = ("lower", "upper")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lower"))) { #optional property not found
            $Lower = $null
        } else {
            $Lower = $JsonParameters.PSobject.Properties["lower"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upper"))) { #optional property not found
            $Upper = $null
        } else {
            $Upper = $JsonParameters.PSobject.Properties["upper"].value
        }

        $PSO = [PSCustomObject]@{
            "lower" = ${Lower}
            "upper" = ${Upper}
        }

        return $PSO
    }

}

