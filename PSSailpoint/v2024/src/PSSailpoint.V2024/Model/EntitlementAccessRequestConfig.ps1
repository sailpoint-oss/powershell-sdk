#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApprovalSchemes
Ordered list of approval steps for the access request. Empty when no approval is required.
.PARAMETER RequestCommentRequired
If the requester must provide a comment during access request.
.PARAMETER DenialCommentRequired
If the reviewer must provide a comment when denying the access request.
.PARAMETER ReauthorizationRequired
Is Reauthorization Required
.OUTPUTS

EntitlementAccessRequestConfig<PSCustomObject>
#>

function Initialize-V2024EntitlementAccessRequestConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ApprovalSchemes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequestCommentRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DenialCommentRequired} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ReauthorizationRequired} = $false
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024EntitlementAccessRequestConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "approvalSchemes" = ${ApprovalSchemes}
            "requestCommentRequired" = ${RequestCommentRequired}
            "denialCommentRequired" = ${DenialCommentRequired}
            "reauthorizationRequired" = ${ReauthorizationRequired}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EntitlementAccessRequestConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to EntitlementAccessRequestConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EntitlementAccessRequestConfig<PSCustomObject>
#>
function ConvertFrom-V2024JsonToEntitlementAccessRequestConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024EntitlementAccessRequestConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024EntitlementAccessRequestConfig
        $AllProperties = ("approvalSchemes", "requestCommentRequired", "denialCommentRequired", "reauthorizationRequired")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approvalSchemes"))) { #optional property not found
            $ApprovalSchemes = $null
        } else {
            $ApprovalSchemes = $JsonParameters.PSobject.Properties["approvalSchemes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestCommentRequired"))) { #optional property not found
            $RequestCommentRequired = $null
        } else {
            $RequestCommentRequired = $JsonParameters.PSobject.Properties["requestCommentRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "denialCommentRequired"))) { #optional property not found
            $DenialCommentRequired = $null
        } else {
            $DenialCommentRequired = $JsonParameters.PSobject.Properties["denialCommentRequired"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reauthorizationRequired"))) { #optional property not found
            $ReauthorizationRequired = $null
        } else {
            $ReauthorizationRequired = $JsonParameters.PSobject.Properties["reauthorizationRequired"].value
        }

        $PSO = [PSCustomObject]@{
            "approvalSchemes" = ${ApprovalSchemes}
            "requestCommentRequired" = ${RequestCommentRequired}
            "denialCommentRequired" = ${DenialCommentRequired}
            "reauthorizationRequired" = ${ReauthorizationRequired}
        }

        return $PSO
    }

}

