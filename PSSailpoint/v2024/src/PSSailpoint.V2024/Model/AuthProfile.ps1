#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Authentication Profile name.
.PARAMETER OffNetwork
Use it to block access from off network.
.PARAMETER UntrustedGeography
Use it to block access from untrusted geoographies.
.PARAMETER ApplicationId
Application ID.
.PARAMETER ApplicationName
Application name.
.PARAMETER Type
Type of the Authentication Profile.
.PARAMETER StrongAuthLogin
Use it to enable strong authentication.
.OUTPUTS

AuthProfile<PSCustomObject>
#>

function Initialize-V2024AuthProfile {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OffNetwork} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UntrustedGeography} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("BLOCK", "MFA", "NON_PTA", "PTA")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${StrongAuthLogin} = $false
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024AuthProfile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "offNetwork" = ${OffNetwork}
            "untrustedGeography" = ${UntrustedGeography}
            "applicationId" = ${ApplicationId}
            "applicationName" = ${ApplicationName}
            "type" = ${Type}
            "strongAuthLogin" = ${StrongAuthLogin}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuthProfile<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuthProfile<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuthProfile<PSCustomObject>
#>
function ConvertFrom-V2024JsonToAuthProfile {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024AuthProfile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024AuthProfile
        $AllProperties = ("name", "offNetwork", "untrustedGeography", "applicationId", "applicationName", "type", "strongAuthLogin")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offNetwork"))) { #optional property not found
            $OffNetwork = $null
        } else {
            $OffNetwork = $JsonParameters.PSobject.Properties["offNetwork"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untrustedGeography"))) { #optional property not found
            $UntrustedGeography = $null
        } else {
            $UntrustedGeography = $JsonParameters.PSobject.Properties["untrustedGeography"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationId"))) { #optional property not found
            $ApplicationId = $null
        } else {
            $ApplicationId = $JsonParameters.PSobject.Properties["applicationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationName"))) { #optional property not found
            $ApplicationName = $null
        } else {
            $ApplicationName = $JsonParameters.PSobject.Properties["applicationName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "strongAuthLogin"))) { #optional property not found
            $StrongAuthLogin = $null
        } else {
            $StrongAuthLogin = $JsonParameters.PSobject.Properties["strongAuthLogin"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "offNetwork" = ${OffNetwork}
            "untrustedGeography" = ${UntrustedGeography}
            "applicationId" = ${ApplicationId}
            "applicationName" = ${ApplicationName}
            "type" = ${Type}
            "strongAuthLogin" = ${StrongAuthLogin}
        }

        return $PSO
    }

}

