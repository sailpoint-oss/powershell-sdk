{"version":3,"file":"InputBuffer.js","names":["createInputBuffer","buffer","offset","currentLength","closed","ensure","index","Error","concat","indexOutOfRangeMessage","push","chunk","length","flush","position","substring","charAt","charCodeAt","start","end","slice","isEnd","close","currentBufferSize"],"sources":["../../../../src/streaming/buffer/InputBuffer.ts"],"sourcesContent":["export interface InputBuffer {\n  push: (chunk: string) => void\n  flush: (position: number) => void\n  charAt: (index: number) => string\n  charCodeAt: (index: number) => number\n  substring: (start: number, end: number) => string\n  length: () => number\n  currentLength: () => number\n  currentBufferSize: () => number\n  isEnd: (index: number) => boolean\n  close: () => void\n}\n\nexport function createInputBuffer(): InputBuffer {\n  let buffer = ''\n  let offset = 0\n  let currentLength = 0\n  let closed = false\n\n  function ensure(index: number) {\n    if (index < offset) {\n      throw new Error(`${indexOutOfRangeMessage} (index: ${index}, offset: ${offset})`)\n    }\n\n    if (index >= currentLength) {\n      if (!closed) {\n        throw new Error(`${indexOutOfRangeMessage} (index: ${index})`)\n      }\n    }\n  }\n\n  function push(chunk: string) {\n    buffer += chunk\n    currentLength += chunk.length\n  }\n\n  function flush(position: number) {\n    if (position > currentLength) {\n      return\n    }\n\n    buffer = buffer.substring(position - offset)\n    offset = position\n  }\n\n  function charAt(index: number): string {\n    ensure(index)\n\n    return buffer.charAt(index - offset)\n  }\n\n  function charCodeAt(index: number): number {\n    ensure(index)\n\n    return buffer.charCodeAt(index - offset)\n  }\n\n  function substring(start: number, end: number): string {\n    ensure(end - 1) // -1 because end is excluded\n    ensure(start)\n\n    return buffer.slice(start - offset, end - offset)\n  }\n\n  function length(): number {\n    if (!closed) {\n      throw new Error('Cannot get length: input is not yet closed')\n    }\n\n    return currentLength\n  }\n\n  function isEnd(index: number): boolean {\n    if (!closed) {\n      ensure(index)\n    }\n\n    return index >= currentLength\n  }\n\n  function close() {\n    closed = true\n  }\n\n  return {\n    push,\n    flush,\n    charAt,\n    charCodeAt,\n    substring,\n    length,\n    currentLength: () => currentLength,\n    currentBufferSize: () => buffer.length,\n    isEnd,\n    close\n  }\n}\n\nconst indexOutOfRangeMessage = 'Index out of range, please configure a larger buffer size'\n"],"mappings":";;;;;;AAaO,SAASA,iBAAiBA,CAAA,EAAgB;EAC/C,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,aAAa,GAAG,CAAC;EACrB,IAAIC,MAAM,GAAG,KAAK;EAElB,SAASC,MAAMA,CAACC,KAAa,EAAE;IAC7B,IAAIA,KAAK,GAAGJ,MAAM,EAAE;MAClB,MAAM,IAAIK,KAAK,IAAAC,MAAA,CAAIC,sBAAsB,eAAAD,MAAA,CAAYF,KAAK,gBAAAE,MAAA,CAAaN,MAAM,MAAG,CAAC;IACnF;IAEA,IAAII,KAAK,IAAIH,aAAa,EAAE;MAC1B,IAAI,CAACC,MAAM,EAAE;QACX,MAAM,IAAIG,KAAK,IAAAC,MAAA,CAAIC,sBAAsB,eAAAD,MAAA,CAAYF,KAAK,MAAG,CAAC;MAChE;IACF;EACF;EAEA,SAASI,IAAIA,CAACC,KAAa,EAAE;IAC3BV,MAAM,IAAIU,KAAK;IACfR,aAAa,IAAIQ,KAAK,CAACC,MAAM;EAC/B;EAEA,SAASC,KAAKA,CAACC,QAAgB,EAAE;IAC/B,IAAIA,QAAQ,GAAGX,aAAa,EAAE;MAC5B;IACF;IAEAF,MAAM,GAAGA,MAAM,CAACc,SAAS,CAACD,QAAQ,GAAGZ,MAAM,CAAC;IAC5CA,MAAM,GAAGY,QAAQ;EACnB;EAEA,SAASE,MAAMA,CAACV,KAAa,EAAU;IACrCD,MAAM,CAACC,KAAK,CAAC;IAEb,OAAOL,MAAM,CAACe,MAAM,CAACV,KAAK,GAAGJ,MAAM,CAAC;EACtC;EAEA,SAASe,UAAUA,CAACX,KAAa,EAAU;IACzCD,MAAM,CAACC,KAAK,CAAC;IAEb,OAAOL,MAAM,CAACgB,UAAU,CAACX,KAAK,GAAGJ,MAAM,CAAC;EAC1C;EAEA,SAASa,SAASA,CAACG,KAAa,EAAEC,GAAW,EAAU;IACrDd,MAAM,CAACc,GAAG,GAAG,CAAC,CAAC,EAAC;IAChBd,MAAM,CAACa,KAAK,CAAC;IAEb,OAAOjB,MAAM,CAACmB,KAAK,CAACF,KAAK,GAAGhB,MAAM,EAAEiB,GAAG,GAAGjB,MAAM,CAAC;EACnD;EAEA,SAASU,MAAMA,CAAA,EAAW;IACxB,IAAI,CAACR,MAAM,EAAE;MACX,MAAM,IAAIG,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IAEA,OAAOJ,aAAa;EACtB;EAEA,SAASkB,KAAKA,CAACf,KAAa,EAAW;IACrC,IAAI,CAACF,MAAM,EAAE;MACXC,MAAM,CAACC,KAAK,CAAC;IACf;IAEA,OAAOA,KAAK,IAAIH,aAAa;EAC/B;EAEA,SAASmB,KAAKA,CAAA,EAAG;IACflB,MAAM,GAAG,IAAI;EACf;EAEA,OAAO;IACLM,IAAI;IACJG,KAAK;IACLG,MAAM;IACNC,UAAU;IACVF,SAAS;IACTH,MAAM;IACNT,aAAa,EAAEA,CAAA,KAAMA,aAAa;IAClCoB,iBAAiB,EAAEA,CAAA,KAAMtB,MAAM,CAACW,MAAM;IACtCS,KAAK;IACLC;EACF,CAAC;AACH;AAEA,MAAMb,sBAAsB,GAAG,2DAA2D","ignoreList":[]}