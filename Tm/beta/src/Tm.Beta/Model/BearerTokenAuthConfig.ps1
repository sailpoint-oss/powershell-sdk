#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Config required if BEARER_TOKEN authentication is used. On response, this field is set to null as to not return secrets.

.PARAMETER BearerToken
Bearer token
.OUTPUTS

BearerTokenAuthConfig<PSCustomObject>
#>

function Initialize-BetaBearerTokenAuthConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BearerToken}
    )

    Process {
        'Creating PSCustomObject: Tm.Beta => BetaBearerTokenAuthConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "bearerToken" = ${BearerToken}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BearerTokenAuthConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to BearerTokenAuthConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BearerTokenAuthConfig<PSCustomObject>
#>
function ConvertFrom-BetaJsonToBearerTokenAuthConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.Beta => BetaBearerTokenAuthConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaBearerTokenAuthConfig
        $AllProperties = ("bearerToken")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bearerToken"))) { #optional property not found
            $BearerToken = $null
        } else {
            $BearerToken = $JsonParameters.PSobject.Properties["bearerToken"].value
        }

        $PSO = [PSCustomObject]@{
            "bearerToken" = ${BearerToken}
        }

        return $PSO
    }

}

