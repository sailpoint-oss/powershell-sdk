#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Identity Record Object

.PARAMETER IdentityID
Identity ID.
.PARAMETER Type
Type of identity.
.PARAMETER Name
Name of the identity.
.PARAMETER ActionedAs
List of references representing actions taken by the identity.
.PARAMETER Members
List of references representing members of the identity.
.PARAMETER DecisionDate
Date when the decision was made.
.PARAMETER Email
Email associated with the identity.
.OUTPUTS

ApprovalIdentityRecord<PSCustomObject>
#>

function Initialize-V2025ApprovalIdentityRecord {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdentityID},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IDENTITY")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ActionedAs},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Members},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DecisionDate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025ApprovalIdentityRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "identityID" = ${IdentityID}
            "type" = ${Type}
            "name" = ${Name}
            "actionedAs" = ${ActionedAs}
            "members" = ${Members}
            "decisionDate" = ${DecisionDate}
            "email" = ${Email}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApprovalIdentityRecord<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApprovalIdentityRecord<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApprovalIdentityRecord<PSCustomObject>
#>
function ConvertFrom-V2025JsonToApprovalIdentityRecord {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025ApprovalIdentityRecord' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025ApprovalIdentityRecord
        $AllProperties = ("identityID", "type", "name", "actionedAs", "members", "decisionDate", "email")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityID"))) { #optional property not found
            $IdentityID = $null
        } else {
            $IdentityID = $JsonParameters.PSobject.Properties["identityID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actionedAs"))) { #optional property not found
            $ActionedAs = $null
        } else {
            $ActionedAs = $JsonParameters.PSobject.Properties["actionedAs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "members"))) { #optional property not found
            $Members = $null
        } else {
            $Members = $JsonParameters.PSobject.Properties["members"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "decisionDate"))) { #optional property not found
            $DecisionDate = $null
        } else {
            $DecisionDate = $JsonParameters.PSobject.Properties["decisionDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        $PSO = [PSCustomObject]@{
            "identityID" = ${IdentityID}
            "type" = ${Type}
            "name" = ${Name}
            "actionedAs" = ${ActionedAs}
            "members" = ${Members}
            "decisionDate" = ${DecisionDate}
            "email" = ${Email}
        }

        return $PSO
    }

}

