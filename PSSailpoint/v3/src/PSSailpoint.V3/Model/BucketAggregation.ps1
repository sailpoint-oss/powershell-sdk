#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The bucket to group the results of the aggregation query by.

.PARAMETER Name
The name of the bucket aggregate to be included in the result.
.PARAMETER Type
No description available.
.PARAMETER Field
The field to bucket on. Prefix the field name with '@' to reference a nested object.
.PARAMETER Size
Maximum number of buckets to include.
.PARAMETER MinDocCount
Minimum number of documents a bucket should have.
.OUTPUTS

BucketAggregation<PSCustomObject>
#>

function Initialize-BucketAggregation {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TERMS")]
        [PSCustomObject]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Field},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinDocCount}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => BucketAggregation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if (!$Field) {
            throw "invalid value for 'Field', 'Field' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "field" = ${Field}
            "size" = ${Size}
            "minDocCount" = ${MinDocCount}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BucketAggregation<PSCustomObject>

.DESCRIPTION

Convert from JSON to BucketAggregation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BucketAggregation<PSCustomObject>
#>
function ConvertFrom-JsonToBucketAggregation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => BucketAggregation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BucketAggregation
        $AllProperties = ("name", "type", "field", "size", "minDocCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field"))) {
            throw "Error! JSON cannot be serialized due to the required property 'field' missing."
        } else {
            $Field = $JsonParameters.PSobject.Properties["field"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minDocCount"))) { #optional property not found
            $MinDocCount = $null
        } else {
            $MinDocCount = $JsonParameters.PSobject.Properties["minDocCount"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "field" = ${Field}
            "size" = ${Size}
            "minDocCount" = ${MinDocCount}
        }

        return $PSO
    }

}

