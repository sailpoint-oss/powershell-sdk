#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The attestation document. This is Base64Url encoded binary data containing the attestation document. This has a cert with a public key that needs to be used to encrypt the private fields of the parameter on creation or update.

.PARAMETER AttestationDocument
The Base64Url encoded attestation document.
.OUTPUTS

ParameterStorageAttestationDocument<PSCustomObject>
#>

function Initialize-V2025ParameterStorageAttestationDocument {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AttestationDocument}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025ParameterStorageAttestationDocument' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attestationDocument" = ${AttestationDocument}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ParameterStorageAttestationDocument<PSCustomObject>

.DESCRIPTION

Convert from JSON to ParameterStorageAttestationDocument<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ParameterStorageAttestationDocument<PSCustomObject>
#>
function ConvertFrom-V2025JsonToParameterStorageAttestationDocument {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025ParameterStorageAttestationDocument' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025ParameterStorageAttestationDocument
        $AllProperties = ("attestationDocument")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attestationDocument"))) { #optional property not found
            $AttestationDocument = $null
        } else {
            $AttestationDocument = $JsonParameters.PSobject.Properties["attestationDocument"].value
        }

        $PSO = [PSCustomObject]@{
            "attestationDocument" = ${AttestationDocument}
        }

        return $PSO
    }

}

