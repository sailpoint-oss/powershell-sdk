#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Request Id for a role insight generation request
.PARAMETER CreatedDate
The date-time role insights request was created.
.PARAMETER LastGenerated
The date-time role insights request was completed.
.PARAMETER NumberOfUpdates
Total number of updates for this request. Starts with 0 and will have correct number when request is COMPLETED.
.PARAMETER RoleIds
The role IDs that are in this request.
.PARAMETER Status
Request status
.OUTPUTS

RoleInsightsResponse<PSCustomObject>
#>

function Initialize-V2025RoleInsightsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedDate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastGenerated},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfUpdates},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RoleIds},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CREATED", "IN PROGRESS", "COMPLETED", "FAILED")]
        [String]
        ${Status}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025RoleInsightsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "createdDate" = ${CreatedDate}
            "lastGenerated" = ${LastGenerated}
            "numberOfUpdates" = ${NumberOfUpdates}
            "roleIds" = ${RoleIds}
            "status" = ${Status}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleInsightsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleInsightsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleInsightsResponse<PSCustomObject>
#>
function ConvertFrom-V2025JsonToRoleInsightsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025RoleInsightsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025RoleInsightsResponse
        $AllProperties = ("id", "createdDate", "lastGenerated", "numberOfUpdates", "roleIds", "status")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdDate"))) { #optional property not found
            $CreatedDate = $null
        } else {
            $CreatedDate = $JsonParameters.PSobject.Properties["createdDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastGenerated"))) { #optional property not found
            $LastGenerated = $null
        } else {
            $LastGenerated = $JsonParameters.PSobject.Properties["lastGenerated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfUpdates"))) { #optional property not found
            $NumberOfUpdates = $null
        } else {
            $NumberOfUpdates = $JsonParameters.PSobject.Properties["numberOfUpdates"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roleIds"))) { #optional property not found
            $RoleIds = $null
        } else {
            $RoleIds = $JsonParameters.PSobject.Properties["roleIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "createdDate" = ${CreatedDate}
            "lastGenerated" = ${LastGenerated}
            "numberOfUpdates" = ${NumberOfUpdates}
            "roleIds" = ${RoleIds}
            "status" = ${Status}
        }

        return $PSO
    }

}

