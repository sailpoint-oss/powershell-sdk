#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902).  Only `replace` operations are accepted by this endpoint.

.PARAMETER Operations
Operations to be applied
.OUTPUTS

PatchServiceDeskIntegrationRequest<PSCustomObject>
#>

function Initialize-V2025PatchServiceDeskIntegrationRequest {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Operations}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025PatchServiceDeskIntegrationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "operations" = ${Operations}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchServiceDeskIntegrationRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchServiceDeskIntegrationRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchServiceDeskIntegrationRequest<PSCustomObject>
#>
function ConvertFrom-V2025JsonToPatchServiceDeskIntegrationRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025PatchServiceDeskIntegrationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025PatchServiceDeskIntegrationRequest
        $AllProperties = ("operations")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operations"))) { #optional property not found
            $Operations = $null
        } else {
            $Operations = $JsonParameters.PSobject.Properties["operations"].value
        }

        $PSO = [PSCustomObject]@{
            "operations" = ${Operations}
        }

        return $PSO
    }

}

