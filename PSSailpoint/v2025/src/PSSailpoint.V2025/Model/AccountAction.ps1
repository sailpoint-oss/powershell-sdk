#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object for specifying Actions to be performed on a specified list of sources' account.

.PARAMETER Action
Describes if action will be enable, disable or delete.
.PARAMETER SourceIds
A unique list of specific source IDs to apply the action to. The sources must have the ENABLE feature or flat file source. Required if allSources is not true. Must not be provided if allSources is true. Cannot be used together with excludeSourceIds See ""/sources"" endpoint for source features.
.PARAMETER ExcludeSourceIds
A list of source IDs to exclude from the action. Cannot be used together with sourceIds.
.PARAMETER AllSources
If true, the action applies to all available sources. If true, sourceIds must not be provided. If false or not set, sourceIds is required.
.OUTPUTS

AccountAction<PSCustomObject>
#>

function Initialize-V2025AccountAction {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ENABLE", "DISABLE", "DELETE")]
        [String]
        ${Action},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${SourceIds},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ExcludeSourceIds},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllSources} = $false
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025AccountAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "action" = ${Action}
            "sourceIds" = ${SourceIds}
            "excludeSourceIds" = ${ExcludeSourceIds}
            "allSources" = ${AllSources}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccountAction<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccountAction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccountAction<PSCustomObject>
#>
function ConvertFrom-V2025JsonToAccountAction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025AccountAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025AccountAction
        $AllProperties = ("action", "sourceIds", "excludeSourceIds", "allSources")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action"))) { #optional property not found
            $Action = $null
        } else {
            $Action = $JsonParameters.PSobject.Properties["action"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceIds"))) { #optional property not found
            $SourceIds = $null
        } else {
            $SourceIds = $JsonParameters.PSobject.Properties["sourceIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excludeSourceIds"))) { #optional property not found
            $ExcludeSourceIds = $null
        } else {
            $ExcludeSourceIds = $JsonParameters.PSobject.Properties["excludeSourceIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allSources"))) { #optional property not found
            $AllSources = $null
        } else {
            $AllSources = $JsonParameters.PSobject.Properties["allSources"].value
        }

        $PSO = [PSCustomObject]@{
            "action" = ${Action}
            "sourceIds" = ${SourceIds}
            "excludeSourceIds" = ${ExcludeSourceIds}
            "allSources" = ${AllSources}
        }

        return $PSO
    }

}

