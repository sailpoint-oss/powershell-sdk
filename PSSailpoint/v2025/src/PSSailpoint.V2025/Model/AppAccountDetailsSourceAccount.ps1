#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
The account ID
.PARAMETER NativeIdentity
The native identity of account
.PARAMETER DisplayName
The display name of account
.PARAMETER SourceId
The source ID of account
.PARAMETER SourceDisplayName
The source name of account
.OUTPUTS

AppAccountDetailsSourceAccount<PSCustomObject>
#>

function Initialize-V2025AppAccountDetailsSourceAccount {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NativeIdentity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceDisplayName}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025AppAccountDetailsSourceAccount' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "nativeIdentity" = ${NativeIdentity}
            "displayName" = ${DisplayName}
            "sourceId" = ${SourceId}
            "sourceDisplayName" = ${SourceDisplayName}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AppAccountDetailsSourceAccount<PSCustomObject>

.DESCRIPTION

Convert from JSON to AppAccountDetailsSourceAccount<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AppAccountDetailsSourceAccount<PSCustomObject>
#>
function ConvertFrom-V2025JsonToAppAccountDetailsSourceAccount {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025AppAccountDetailsSourceAccount' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025AppAccountDetailsSourceAccount
        $AllProperties = ("id", "nativeIdentity", "displayName", "sourceId", "sourceDisplayName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nativeIdentity"))) { #optional property not found
            $NativeIdentity = $null
        } else {
            $NativeIdentity = $JsonParameters.PSobject.Properties["nativeIdentity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceDisplayName"))) { #optional property not found
            $SourceDisplayName = $null
        } else {
            $SourceDisplayName = $JsonParameters.PSobject.Properties["sourceDisplayName"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "nativeIdentity" = ${NativeIdentity}
            "displayName" = ${DisplayName}
            "sourceId" = ${SourceId}
            "sourceDisplayName" = ${SourceDisplayName}
        }

        return $PSO
    }

}

