#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Reference to accounts file for the source.

.PARAMETER Name
Name of the accounts file.
.PARAMETER Key
The accounts file key.
.PARAMETER UploadTime
Date-time when the file was uploaded
.PARAMETER Expiry
Date-time when the accounts file expired.
.PARAMETER Expired
If this is true, it indicates that the accounts file has expired.
.OUTPUTS

MultiHostIntegrationsAccountsFile<PSCustomObject>
#>

function Initialize-V2025MultiHostIntegrationsAccountsFile {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${UploadTime},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Expiry},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Expired} = $false
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025MultiHostIntegrationsAccountsFile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "key" = ${Key}
            "uploadTime" = ${UploadTime}
            "expiry" = ${Expiry}
            "expired" = ${Expired}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MultiHostIntegrationsAccountsFile<PSCustomObject>

.DESCRIPTION

Convert from JSON to MultiHostIntegrationsAccountsFile<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MultiHostIntegrationsAccountsFile<PSCustomObject>
#>
function ConvertFrom-V2025JsonToMultiHostIntegrationsAccountsFile {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025MultiHostIntegrationsAccountsFile' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025MultiHostIntegrationsAccountsFile
        $AllProperties = ("name", "key", "uploadTime", "expiry", "expired")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uploadTime"))) { #optional property not found
            $UploadTime = $null
        } else {
            $UploadTime = $JsonParameters.PSobject.Properties["uploadTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expiry"))) { #optional property not found
            $Expiry = $null
        } else {
            $Expiry = $JsonParameters.PSobject.Properties["expiry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expired"))) { #optional property not found
            $Expired = $null
        } else {
            $Expired = $JsonParameters.PSobject.Properties["expired"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "key" = ${Key}
            "uploadTime" = ${UploadTime}
            "expiry" = ${Expiry}
            "expired" = ${Expired}
        }

        return $PSO
    }

}

