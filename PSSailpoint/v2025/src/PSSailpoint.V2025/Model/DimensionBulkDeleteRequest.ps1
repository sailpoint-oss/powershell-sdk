#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DimensionIds
List of IDs of Dimensions to be deleted.
.OUTPUTS

DimensionBulkDeleteRequest<PSCustomObject>
#>

function Initialize-V2025DimensionBulkDeleteRequest {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DimensionIds}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025DimensionBulkDeleteRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$DimensionIds) {
            throw "invalid value for 'DimensionIds', 'DimensionIds' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "dimensionIds" = ${DimensionIds}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DimensionBulkDeleteRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to DimensionBulkDeleteRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DimensionBulkDeleteRequest<PSCustomObject>
#>
function ConvertFrom-V2025JsonToDimensionBulkDeleteRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025DimensionBulkDeleteRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025DimensionBulkDeleteRequest
        $AllProperties = ("dimensionIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dimensionIds' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dimensionIds"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dimensionIds' missing."
        } else {
            $DimensionIds = $JsonParameters.PSobject.Properties["dimensionIds"].value
        }

        $PSO = [PSCustomObject]@{
            "dimensionIds" = ${DimensionIds}
        }

        return $PSO
    }

}

