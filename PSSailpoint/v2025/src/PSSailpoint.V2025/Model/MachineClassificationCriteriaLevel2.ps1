#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Operation
No description available.
.PARAMETER CaseSensitive
Indicates whether case matters when evaluating the criteria
.PARAMETER DataType
The data type of the attribute being evaluated
.PARAMETER Attribute
The attribute to evaluate in the classification criteria
.PARAMETER Value
The value to compare against the attribute in the classification criteria
.PARAMETER Children
An array of child classification criteria objects
.OUTPUTS

MachineClassificationCriteriaLevel2<PSCustomObject>
#>

function Initialize-V2025MachineClassificationCriteriaLevel2 {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EQUALS", "NOT_EQUALS", "STARTS_WITH", "ENDS_WITH", "CONTAINS", "AND", "OR")]
        [PSCustomObject]
        ${Operation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CaseSensitive} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Attribute},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Children}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025MachineClassificationCriteriaLevel2' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "operation" = ${Operation}
            "caseSensitive" = ${CaseSensitive}
            "dataType" = ${DataType}
            "attribute" = ${Attribute}
            "value" = ${Value}
            "children" = ${Children}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MachineClassificationCriteriaLevel2<PSCustomObject>

.DESCRIPTION

Convert from JSON to MachineClassificationCriteriaLevel2<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MachineClassificationCriteriaLevel2<PSCustomObject>
#>
function ConvertFrom-V2025JsonToMachineClassificationCriteriaLevel2 {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025MachineClassificationCriteriaLevel2' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025MachineClassificationCriteriaLevel2
        $AllProperties = ("operation", "caseSensitive", "dataType", "attribute", "value", "children")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation"))) { #optional property not found
            $Operation = $null
        } else {
            $Operation = $JsonParameters.PSobject.Properties["operation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "caseSensitive"))) { #optional property not found
            $CaseSensitive = $null
        } else {
            $CaseSensitive = $JsonParameters.PSobject.Properties["caseSensitive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dataType"))) { #optional property not found
            $DataType = $null
        } else {
            $DataType = $JsonParameters.PSobject.Properties["dataType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attribute"))) { #optional property not found
            $Attribute = $null
        } else {
            $Attribute = $JsonParameters.PSobject.Properties["attribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "children"))) { #optional property not found
            $Children = $null
        } else {
            $Children = $JsonParameters.PSobject.Properties["children"].value
        }

        $PSO = [PSCustomObject]@{
            "operation" = ${Operation}
            "caseSensitive" = ${CaseSensitive}
            "dataType" = ${DataType}
            "attribute" = ${Attribute}
            "value" = ${Value}
            "children" = ${Children}
        }

        return $PSO
    }

}

