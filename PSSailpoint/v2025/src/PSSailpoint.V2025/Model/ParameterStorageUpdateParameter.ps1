#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An existing parameter that needs to be updated. The type cannot be changed once the parameter is created.

.PARAMETER OwnerId
The UUID of the parameter owner.
.PARAMETER Name
The human-readable name for the parameter.
.PARAMETER PublicFields
The public fields that can be stored with this parameter.
.PARAMETER PrivateFields
The private fields that can be stored with this parameter.
.PARAMETER Description
Describe the parameter
.OUTPUTS

ParameterStorageUpdateParameter<PSCustomObject>
#>

function Initialize-V2025ParameterStorageUpdateParameter {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwnerId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PublicFields},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrivateFields},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025ParameterStorageUpdateParameter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "ownerId" = ${OwnerId}
            "name" = ${Name}
            "publicFields" = ${PublicFields}
            "privateFields" = ${PrivateFields}
            "description" = ${Description}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ParameterStorageUpdateParameter<PSCustomObject>

.DESCRIPTION

Convert from JSON to ParameterStorageUpdateParameter<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ParameterStorageUpdateParameter<PSCustomObject>
#>
function ConvertFrom-V2025JsonToParameterStorageUpdateParameter {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025ParameterStorageUpdateParameter' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025ParameterStorageUpdateParameter
        $AllProperties = ("ownerId", "name", "publicFields", "privateFields", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ownerId"))) { #optional property not found
            $OwnerId = $null
        } else {
            $OwnerId = $JsonParameters.PSobject.Properties["ownerId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "publicFields"))) { #optional property not found
            $PublicFields = $null
        } else {
            $PublicFields = $JsonParameters.PSobject.Properties["publicFields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privateFields"))) { #optional property not found
            $PrivateFields = $null
        } else {
            $PrivateFields = $JsonParameters.PSobject.Properties["privateFields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "ownerId" = ${OwnerId}
            "name" = ${Name}
            "publicFields" = ${PublicFields}
            "privateFields" = ${PrivateFields}
            "description" = ${Description}
        }

        return $PSO
    }

}

