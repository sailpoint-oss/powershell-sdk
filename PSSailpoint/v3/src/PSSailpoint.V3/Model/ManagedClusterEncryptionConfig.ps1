#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Defines the encryption settings for a managed cluster, including the format used for storing and processing encrypted data.

.PARAMETER Format
Specifies the format used for encrypted data, such as secrets. The format determines how the encrypted data is structured and processed.
.OUTPUTS

ManagedClusterEncryptionConfig<PSCustomObject>
#>

function Initialize-ManagedClusterEncryptionConfig {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("V2", "V3")]
        [String]
        ${Format}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => ManagedClusterEncryptionConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "format" = ${Format}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ManagedClusterEncryptionConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to ManagedClusterEncryptionConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ManagedClusterEncryptionConfig<PSCustomObject>
#>
function ConvertFrom-JsonToManagedClusterEncryptionConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => ManagedClusterEncryptionConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ManagedClusterEncryptionConfig
        $AllProperties = ("format")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "format"))) { #optional property not found
            $Format = $null
        } else {
            $Format = $JsonParameters.PSobject.Properties["format"].value
        }

        $PSO = [PSCustomObject]@{
            "format" = ${Format}
        }

        return $PSO
    }

}

