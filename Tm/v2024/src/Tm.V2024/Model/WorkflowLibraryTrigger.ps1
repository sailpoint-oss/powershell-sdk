#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Trigger ID. This is a static namespaced ID for the trigger.
.PARAMETER Type
Trigger type
.PARAMETER Deprecated
No description available.
.PARAMETER DeprecatedBy
No description available.
.PARAMETER IsSimulationEnabled
No description available.
.PARAMETER OutputSchema
Example output schema
.PARAMETER Name
Trigger Name
.PARAMETER Description
Trigger Description
.PARAMETER IsDynamicSchema
Determines whether the dynamic output schema is returned in place of the action's output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
.PARAMETER InputExample
Example trigger payload if applicable
.PARAMETER FormFields
One or more inputs that the trigger accepts
.OUTPUTS

WorkflowLibraryTrigger<PSCustomObject>
#>

function Initialize-V2024WorkflowLibraryTrigger {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EVENT", "SCHEDULED", "EXTERNAL")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deprecated},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DeprecatedBy},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSimulationEnabled},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OutputSchema},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsDynamicSchema} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InputExample},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${FormFields}
    )

    Process {
        'Creating PSCustomObject: Tm.V2024 => V2024WorkflowLibraryTrigger' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "deprecated" = ${Deprecated}
            "deprecatedBy" = ${DeprecatedBy}
            "isSimulationEnabled" = ${IsSimulationEnabled}
            "outputSchema" = ${OutputSchema}
            "name" = ${Name}
            "description" = ${Description}
            "isDynamicSchema" = ${IsDynamicSchema}
            "inputExample" = ${InputExample}
            "formFields" = ${FormFields}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WorkflowLibraryTrigger<PSCustomObject>

.DESCRIPTION

Convert from JSON to WorkflowLibraryTrigger<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WorkflowLibraryTrigger<PSCustomObject>
#>
function ConvertFrom-V2024JsonToWorkflowLibraryTrigger {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.V2024 => V2024WorkflowLibraryTrigger' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024WorkflowLibraryTrigger
        $AllProperties = ("id", "type", "deprecated", "deprecatedBy", "isSimulationEnabled", "outputSchema", "name", "description", "isDynamicSchema", "inputExample", "formFields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deprecated"))) { #optional property not found
            $Deprecated = $null
        } else {
            $Deprecated = $JsonParameters.PSobject.Properties["deprecated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deprecatedBy"))) { #optional property not found
            $DeprecatedBy = $null
        } else {
            $DeprecatedBy = $JsonParameters.PSobject.Properties["deprecatedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSimulationEnabled"))) { #optional property not found
            $IsSimulationEnabled = $null
        } else {
            $IsSimulationEnabled = $JsonParameters.PSobject.Properties["isSimulationEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outputSchema"))) { #optional property not found
            $OutputSchema = $null
        } else {
            $OutputSchema = $JsonParameters.PSobject.Properties["outputSchema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isDynamicSchema"))) { #optional property not found
            $IsDynamicSchema = $null
        } else {
            $IsDynamicSchema = $JsonParameters.PSobject.Properties["isDynamicSchema"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inputExample"))) { #optional property not found
            $InputExample = $null
        } else {
            $InputExample = $JsonParameters.PSobject.Properties["inputExample"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formFields"))) { #optional property not found
            $FormFields = $null
        } else {
            $FormFields = $JsonParameters.PSobject.Properties["formFields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "deprecated" = ${Deprecated}
            "deprecatedBy" = ${DeprecatedBy}
            "isSimulationEnabled" = ${IsSimulationEnabled}
            "outputSchema" = ${OutputSchema}
            "name" = ${Name}
            "description" = ${Description}
            "isDynamicSchema" = ${IsDynamicSchema}
            "inputExample" = ${InputExample}
            "formFields" = ${FormFields}
        }

        return $PSO
    }

}

