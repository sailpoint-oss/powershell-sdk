#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Metadata that describes an access item

.PARAMETER Key
Unique identifier for the metadata type
.PARAMETER Name
Human readable name of the metadata type
.PARAMETER Multiselect
Allows selecting multiple values
.PARAMETER Status
The state of the metadata item
.PARAMETER Type
The type of the metadata item
.PARAMETER ObjectTypes
The types of objects
.PARAMETER Description
Describes the metadata item
.PARAMETER Values
The value to assign to the metadata item
.OUTPUTS

AccessModelMetadata<PSCustomObject>
#>

function Initialize-V2025AccessModelMetadata {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Multiselect} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ObjectTypes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Values}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025AccessModelMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "key" = ${Key}
            "name" = ${Name}
            "multiselect" = ${Multiselect}
            "status" = ${Status}
            "type" = ${Type}
            "objectTypes" = ${ObjectTypes}
            "description" = ${Description}
            "values" = ${Values}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessModelMetadata<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessModelMetadata<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessModelMetadata<PSCustomObject>
#>
function ConvertFrom-V2025JsonToAccessModelMetadata {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025AccessModelMetadata' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025AccessModelMetadata
        $AllProperties = ("key", "name", "multiselect", "status", "type", "objectTypes", "description", "values")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiselect"))) { #optional property not found
            $Multiselect = $null
        } else {
            $Multiselect = $JsonParameters.PSobject.Properties["multiselect"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "objectTypes"))) { #optional property not found
            $ObjectTypes = $null
        } else {
            $ObjectTypes = $JsonParameters.PSobject.Properties["objectTypes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "values"))) { #optional property not found
            $Values = $null
        } else {
            $Values = $JsonParameters.PSobject.Properties["values"].value
        }

        $PSO = [PSCustomObject]@{
            "key" = ${Key}
            "name" = ${Name}
            "multiselect" = ${Multiselect}
            "status" = ${Status}
            "type" = ${Type}
            "objectTypes" = ${ObjectTypes}
            "description" = ${Description}
            "values" = ${Values}
        }

        return $PSO
    }

}

