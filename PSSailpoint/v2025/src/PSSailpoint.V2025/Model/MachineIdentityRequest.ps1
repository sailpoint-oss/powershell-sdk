#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
Name of the Object
.PARAMETER BusinessApplication
The business application that the identity represents
.PARAMETER Description
Description of machine identity
.PARAMETER Attributes
A map of custom machine identity attributes
.PARAMETER Subtype
The subtype value associated to the machine identity
.PARAMETER Owners
No description available.
.PARAMETER SourceId
The source id associated to the machine identity
.PARAMETER Uuid
The UUID associated to the machine identity directly aggregated from a source
.PARAMETER NativeIdentity
The native identity associated to the machine identity directly aggregated from a source
.PARAMETER UserEntitlements
The user entitlements associated to the machine identity
.OUTPUTS

MachineIdentityRequest<PSCustomObject>
#>

function Initialize-V2025MachineIdentityRequest {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusinessApplication},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Attributes},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subtype},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owners},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uuid},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NativeIdentity},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${UserEntitlements}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025MachineIdentityRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$BusinessApplication) {
            throw "invalid value for 'BusinessApplication', 'BusinessApplication' cannot be null."
        }

        if (!$Subtype) {
            throw "invalid value for 'Subtype', 'Subtype' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "businessApplication" = ${BusinessApplication}
            "description" = ${Description}
            "attributes" = ${Attributes}
            "subtype" = ${Subtype}
            "owners" = ${Owners}
            "sourceId" = ${SourceId}
            "uuid" = ${Uuid}
            "nativeIdentity" = ${NativeIdentity}
            "userEntitlements" = ${UserEntitlements}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MachineIdentityRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to MachineIdentityRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MachineIdentityRequest<PSCustomObject>
#>
function ConvertFrom-V2025JsonToMachineIdentityRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025MachineIdentityRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025MachineIdentityRequest
        $AllProperties = ("id", "name", "created", "modified", "businessApplication", "description", "attributes", "subtype", "owners", "sourceId", "uuid", "nativeIdentity", "userEntitlements")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessApplication"))) {
            throw "Error! JSON cannot be serialized due to the required property 'businessApplication' missing."
        } else {
            $BusinessApplication = $JsonParameters.PSobject.Properties["businessApplication"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subtype"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subtype' missing."
        } else {
            $Subtype = $JsonParameters.PSobject.Properties["subtype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributes"))) { #optional property not found
            $Attributes = $null
        } else {
            $Attributes = $JsonParameters.PSobject.Properties["attributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owners"))) { #optional property not found
            $Owners = $null
        } else {
            $Owners = $JsonParameters.PSobject.Properties["owners"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uuid"))) { #optional property not found
            $Uuid = $null
        } else {
            $Uuid = $JsonParameters.PSobject.Properties["uuid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nativeIdentity"))) { #optional property not found
            $NativeIdentity = $null
        } else {
            $NativeIdentity = $JsonParameters.PSobject.Properties["nativeIdentity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userEntitlements"))) { #optional property not found
            $UserEntitlements = $null
        } else {
            $UserEntitlements = $JsonParameters.PSobject.Properties["userEntitlements"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "created" = ${Created}
            "modified" = ${Modified}
            "businessApplication" = ${BusinessApplication}
            "description" = ${Description}
            "attributes" = ${Attributes}
            "subtype" = ${Subtype}
            "owners" = ${Owners}
            "sourceId" = ${SourceId}
            "uuid" = ${Uuid}
            "nativeIdentity" = ${NativeIdentity}
            "userEntitlements" = ${UserEntitlements}
        }

        return $PSO
    }

}

