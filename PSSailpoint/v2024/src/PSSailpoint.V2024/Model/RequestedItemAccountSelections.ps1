#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Description
The description for this requested item
.PARAMETER AccountsSelectionBlocked
This field indicates if account selections are not allowed for this requested item. * If true, this field indicates that account selections will not be available for this item and user combination. In this case, no account selections should be provided in the access request for this item and user combination, irrespective of whether the user has single or multiple accounts on a source. * An example is where a user is requesting an access profile that is already assigned to one of their accounts. 
.PARAMETER AccountsSelectionBlockedReason
If account selections are not allowed for an item, this field will denote the reason.
.PARAMETER Type
The type of the item being requested.
.PARAMETER Id
The id of the requested item
.PARAMETER Name
The name of the requested item
.PARAMETER Sources
The details for the sources and accounts for the requested item and identity combination
.OUTPUTS

RequestedItemAccountSelections<PSCustomObject>
#>

function Initialize-V2024RequestedItemAccountSelections {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AccountsSelectionBlocked} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountsSelectionBlockedReason},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACCESS_PROFILE", "ROLE", "ENTITLEMENT")]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Sources}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024RequestedItemAccountSelections' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "accountsSelectionBlocked" = ${AccountsSelectionBlocked}
            "accountsSelectionBlockedReason" = ${AccountsSelectionBlockedReason}
            "type" = ${Type}
            "id" = ${Id}
            "name" = ${Name}
            "sources" = ${Sources}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RequestedItemAccountSelections<PSCustomObject>

.DESCRIPTION

Convert from JSON to RequestedItemAccountSelections<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RequestedItemAccountSelections<PSCustomObject>
#>
function ConvertFrom-V2024JsonToRequestedItemAccountSelections {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024RequestedItemAccountSelections' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024RequestedItemAccountSelections
        $AllProperties = ("description", "accountsSelectionBlocked", "accountsSelectionBlockedReason", "type", "id", "name", "sources")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountsSelectionBlocked"))) { #optional property not found
            $AccountsSelectionBlocked = $null
        } else {
            $AccountsSelectionBlocked = $JsonParameters.PSobject.Properties["accountsSelectionBlocked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountsSelectionBlockedReason"))) { #optional property not found
            $AccountsSelectionBlockedReason = $null
        } else {
            $AccountsSelectionBlockedReason = $JsonParameters.PSobject.Properties["accountsSelectionBlockedReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sources"))) { #optional property not found
            $Sources = $null
        } else {
            $Sources = $JsonParameters.PSobject.Properties["sources"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "accountsSelectionBlocked" = ${AccountsSelectionBlocked}
            "accountsSelectionBlockedReason" = ${AccountsSelectionBlockedReason}
            "type" = ${Type}
            "id" = ${Id}
            "name" = ${Name}
            "sources" = ${Sources}
        }

        return $PSO
    }

}

