#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
the access item id
.PARAMETER AccessType
the access item type. entitlement in this case
.PARAMETER DisplayName
the display name of the identity
.PARAMETER SourceName
the name of the source
.PARAMETER Attribute
the entitlement attribute
.PARAMETER Value
the associated value
.PARAMETER Type
the type of entitlement
.PARAMETER Description
the description for the entitlment
.PARAMETER SourceId
the id of the source
.PARAMETER Standalone
indicates whether the entitlement is standalone
.PARAMETER Privileged
indicates whether the entitlement is privileged
.PARAMETER CloudGoverned
indicates whether the entitlement is cloud governed
.OUTPUTS

AccessItemEntitlementResponse<PSCustomObject>
#>

function Initialize-BetaAccessItemEntitlementResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Attribute},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Standalone},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Privileged},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CloudGoverned}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaAccessItemEntitlementResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Attribute) {
            throw "invalid value for 'Attribute', 'Attribute' cannot be null."
        }

        if (!$Value) {
            throw "invalid value for 'Value', 'Value' cannot be null."
        }

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "accessType" = ${AccessType}
            "displayName" = ${DisplayName}
            "sourceName" = ${SourceName}
            "attribute" = ${Attribute}
            "value" = ${Value}
            "type" = ${Type}
            "description" = ${Description}
            "sourceId" = ${SourceId}
            "standalone" = ${Standalone}
            "privileged" = ${Privileged}
            "cloudGoverned" = ${CloudGoverned}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessItemEntitlementResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessItemEntitlementResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessItemEntitlementResponse<PSCustomObject>
#>
function ConvertFrom-BetaJsonToAccessItemEntitlementResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaAccessItemEntitlementResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaAccessItemEntitlementResponse
        $AllProperties = ("id", "accessType", "displayName", "sourceName", "attribute", "value", "type", "description", "sourceId", "standalone", "privileged", "cloudGoverned")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'attribute' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attribute"))) {
            throw "Error! JSON cannot be serialized due to the required property 'attribute' missing."
        } else {
            $Attribute = $JsonParameters.PSobject.Properties["attribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standalone"))) {
            throw "Error! JSON cannot be serialized due to the required property 'standalone' missing."
        } else {
            $Standalone = $JsonParameters.PSobject.Properties["standalone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "privileged"))) {
            throw "Error! JSON cannot be serialized due to the required property 'privileged' missing."
        } else {
            $Privileged = $JsonParameters.PSobject.Properties["privileged"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cloudGoverned"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cloudGoverned' missing."
        } else {
            $CloudGoverned = $JsonParameters.PSobject.Properties["cloudGoverned"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessType"))) { #optional property not found
            $AccessType = $null
        } else {
            $AccessType = $JsonParameters.PSobject.Properties["accessType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceName"))) { #optional property not found
            $SourceName = $null
        } else {
            $SourceName = $JsonParameters.PSobject.Properties["sourceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "accessType" = ${AccessType}
            "displayName" = ${DisplayName}
            "sourceName" = ${SourceName}
            "attribute" = ${Attribute}
            "value" = ${Value}
            "type" = ${Type}
            "description" = ${Description}
            "sourceId" = ${SourceId}
            "standalone" = ${Standalone}
            "privileged" = ${Privileged}
            "cloudGoverned" = ${CloudGoverned}
        }

        return $PSO
    }

}

