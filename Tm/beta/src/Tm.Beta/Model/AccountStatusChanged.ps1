#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EventType
the event type
.PARAMETER IdentityId
the identity id
.PARAMETER Dt
the date of event
.PARAMETER Account
No description available.
.PARAMETER StatusChange
No description available.
.OUTPUTS

AccountStatusChanged<PSCustomObject>
#>

function Initialize-BetaAccountStatusChanged {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EventType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdentityId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Dt},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Account},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StatusChange}
    )

    Process {
        'Creating PSCustomObject: Tm.Beta => BetaAccountStatusChanged' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "eventType" = ${EventType}
            "identityId" = ${IdentityId}
            "dt" = ${Dt}
            "account" = ${Account}
            "statusChange" = ${StatusChange}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccountStatusChanged<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccountStatusChanged<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccountStatusChanged<PSCustomObject>
#>
function ConvertFrom-BetaJsonToAccountStatusChanged {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Tm.Beta => BetaAccountStatusChanged' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaAccountStatusChanged
        $AllProperties = ("eventType", "identityId", "dt", "account", "statusChange")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventType"))) { #optional property not found
            $EventType = $null
        } else {
            $EventType = $JsonParameters.PSobject.Properties["eventType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityId"))) { #optional property not found
            $IdentityId = $null
        } else {
            $IdentityId = $JsonParameters.PSobject.Properties["identityId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dt"))) { #optional property not found
            $Dt = $null
        } else {
            $Dt = $JsonParameters.PSobject.Properties["dt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "statusChange"))) { #optional property not found
            $StatusChange = $null
        } else {
            $StatusChange = $JsonParameters.PSobject.Properties["statusChange"].value
        }

        $PSO = [PSCustomObject]@{
            "eventType" = ${EventType}
            "identityId" = ${IdentityId}
            "dt" = ${Dt}
            "account" = ${Account}
            "statusChange" = ${StatusChange}
        }

        return $PSO
    }

}

