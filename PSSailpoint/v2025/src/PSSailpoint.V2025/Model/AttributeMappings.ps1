#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Target
No description available.
.PARAMETER TransformDefinition
No description available.
.OUTPUTS

AttributeMappings<PSCustomObject>
#>

function Initialize-V2025AttributeMappings {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Target},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TransformDefinition}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025AttributeMappings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "target" = ${Target}
            "transformDefinition" = ${TransformDefinition}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AttributeMappings<PSCustomObject>

.DESCRIPTION

Convert from JSON to AttributeMappings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AttributeMappings<PSCustomObject>
#>
function ConvertFrom-V2025JsonToAttributeMappings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025AttributeMappings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025AttributeMappings
        $AllProperties = ("target", "transformDefinition")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transformDefinition"))) { #optional property not found
            $TransformDefinition = $null
        } else {
            $TransformDefinition = $JsonParameters.PSobject.Properties["transformDefinition"].value
        }

        $PSO = [PSCustomObject]@{
            "target" = ${Target}
            "transformDefinition" = ${TransformDefinition}
        }

        return $PSO
    }

}

