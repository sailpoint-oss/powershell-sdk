#
# Identity Security Cloud V2024 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2024
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Managed Cluster Type for Cluster upgrade configuration information

.PARAMETER Type
ManagedClusterType type name
.PARAMETER Pod
ManagedClusterType pod
.PARAMETER Org
ManagedClusterType org
.PARAMETER ManagedProcessIds
List of processes for the cluster type
.OUTPUTS

ManagedClusterType<PSCustomObject>
#>

function Initialize-V2024ManagedClusterType {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pod},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Org},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ManagedProcessIds}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2024 => V2024ManagedClusterType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if (!$Pod) {
            throw "invalid value for 'Pod', 'Pod' cannot be null."
        }

        if (!$Org) {
            throw "invalid value for 'Org', 'Org' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "pod" = ${Pod}
            "org" = ${Org}
            "managedProcessIds" = ${ManagedProcessIds}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ManagedClusterType<PSCustomObject>

.DESCRIPTION

Convert from JSON to ManagedClusterType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ManagedClusterType<PSCustomObject>
#>
function ConvertFrom-V2024JsonToManagedClusterType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2024 => V2024ManagedClusterType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2024ManagedClusterType
        $AllProperties = ("id", "type", "pod", "org", "managedProcessIds")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pod"))) {
            throw "Error! JSON cannot be serialized due to the required property 'pod' missing."
        } else {
            $Pod = $JsonParameters.PSobject.Properties["pod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "org"))) {
            throw "Error! JSON cannot be serialized due to the required property 'org' missing."
        } else {
            $Org = $JsonParameters.PSobject.Properties["org"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managedProcessIds"))) { #optional property not found
            $ManagedProcessIds = $null
        } else {
            $ManagedProcessIds = $JsonParameters.PSobject.Properties["managedProcessIds"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "pod" = ${Pod}
            "org" = ${Org}
            "managedProcessIds" = ${ManagedProcessIds}
        }

        return $PSO
    }

}

