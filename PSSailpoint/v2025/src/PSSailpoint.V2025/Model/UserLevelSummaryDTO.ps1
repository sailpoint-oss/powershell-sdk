#
# Identity Security Cloud V2025 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: v2025
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

It represents a summary of a user level, including its metadata, attributes, and associated properties.

.PARAMETER Id
The unique identifier of the UserLevel.
.PARAMETER Name
The human-readable name of the UserLevel.
.PARAMETER Description
A human-readable description of the UserLevel.
.PARAMETER LegacyGroup
The legacy group associated with the UserLevel, used for backward compatibility for the UserLevel id.
.PARAMETER RightSets
List of RightSets associated with the UserLevel.
.PARAMETER Custom
Indicates whether the UserLevel is custom.
.PARAMETER AdminAssignable
Indicates whether the UserLevel is admin-assignable.
.PARAMETER TranslatedName
The translated name of the UserLevel.
.PARAMETER TranslatedGrant
The translated grant message for the UserLevel.
.PARAMETER TranslatedRemove
The translated remove message for the UserLevel.
.PARAMETER Owner
No description available.
.PARAMETER Status
The status of the UserLevel.
.PARAMETER Created
The creation timestamp of the UserLevel.
.PARAMETER Modified
The last modification timestamp of the UserLevel.
.PARAMETER AssociatedIdentitiesCount
The count of associated identities for the UserLevel.
.OUTPUTS

UserLevelSummaryDTO<PSCustomObject>
#>

function Initialize-V2025UserLevelSummaryDTO {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LegacyGroup},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${RightSets},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Custom} = $true,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AdminAssignable} = $true,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TranslatedName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TranslatedGrant},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TranslatedRemove},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Owner},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "DRAFT")]
        [String]
        ${Status},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Modified},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AssociatedIdentitiesCount}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V2025 => V2025UserLevelSummaryDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "legacyGroup" = ${LegacyGroup}
            "rightSets" = ${RightSets}
            "custom" = ${Custom}
            "adminAssignable" = ${AdminAssignable}
            "translatedName" = ${TranslatedName}
            "translatedGrant" = ${TranslatedGrant}
            "translatedRemove" = ${TranslatedRemove}
            "owner" = ${Owner}
            "status" = ${Status}
            "created" = ${Created}
            "modified" = ${Modified}
            "associatedIdentitiesCount" = ${AssociatedIdentitiesCount}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserLevelSummaryDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserLevelSummaryDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserLevelSummaryDTO<PSCustomObject>
#>
function ConvertFrom-V2025JsonToUserLevelSummaryDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V2025 => V2025UserLevelSummaryDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in V2025UserLevelSummaryDTO
        $AllProperties = ("id", "name", "description", "legacyGroup", "rightSets", "custom", "adminAssignable", "translatedName", "translatedGrant", "translatedRemove", "owner", "status", "created", "modified", "associatedIdentitiesCount")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "legacyGroup"))) { #optional property not found
            $LegacyGroup = $null
        } else {
            $LegacyGroup = $JsonParameters.PSobject.Properties["legacyGroup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rightSets"))) { #optional property not found
            $RightSets = $null
        } else {
            $RightSets = $JsonParameters.PSobject.Properties["rightSets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom"))) { #optional property not found
            $Custom = $null
        } else {
            $Custom = $JsonParameters.PSobject.Properties["custom"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adminAssignable"))) { #optional property not found
            $AdminAssignable = $null
        } else {
            $AdminAssignable = $JsonParameters.PSobject.Properties["adminAssignable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "translatedName"))) { #optional property not found
            $TranslatedName = $null
        } else {
            $TranslatedName = $JsonParameters.PSobject.Properties["translatedName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "translatedGrant"))) { #optional property not found
            $TranslatedGrant = $null
        } else {
            $TranslatedGrant = $JsonParameters.PSobject.Properties["translatedGrant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "translatedRemove"))) { #optional property not found
            $TranslatedRemove = $null
        } else {
            $TranslatedRemove = $JsonParameters.PSobject.Properties["translatedRemove"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modified"))) { #optional property not found
            $Modified = $null
        } else {
            $Modified = $JsonParameters.PSobject.Properties["modified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "associatedIdentitiesCount"))) { #optional property not found
            $AssociatedIdentitiesCount = $null
        } else {
            $AssociatedIdentitiesCount = $JsonParameters.PSobject.Properties["associatedIdentitiesCount"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "legacyGroup" = ${LegacyGroup}
            "rightSets" = ${RightSets}
            "custom" = ${Custom}
            "adminAssignable" = ${AdminAssignable}
            "translatedName" = ${TranslatedName}
            "translatedGrant" = ${TranslatedGrant}
            "translatedRemove" = ${TranslatedRemove}
            "owner" = ${Owner}
            "status" = ${Status}
            "created" = ${Created}
            "modified" = ${Modified}
            "associatedIdentitiesCount" = ${AssociatedIdentitiesCount}
        }

        return $PSO
    }

}

