#
# Identity Security Cloud V3 API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Type
No description available.
.PARAMETER Operation
No description available.
.PARAMETER Property
Specified key from the type of criteria.
.PARAMETER Value
Value for the specified key from the type of criteria.
.PARAMETER NegateResult
If true, the filter will negate the result of the criteria.
.PARAMETER ShortCircuit
If true, the filter will short circuit the evaluation of the criteria.
.PARAMETER RecordChildMatches
If true, the filter will record child matches for the criteria.
.PARAMETER Id
The unique ID of the criteria.
.PARAMETER SuppressMatchedItems
If this value is true, then matched items will not only be excluded from the campaign, they will also not have archived certification items created.  Such items will not appear in the exclusion report. 
.PARAMETER Children
List of child criteria.
.OUTPUTS

CampaignFilterDetailsCriteriaListInner<PSCustomObject>
#>

function Initialize-CampaignFilterDetailsCriteriaListInner {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("COMPOSITE", "ROLE", "IDENTITY", "IDENTITY_ATTRIBUTE", "ENTITLEMENT", "ACCESS_PROFILE", "SOURCE", "ACCOUNT", "AGGREGATED_ENTITLEMENT", "INVALID_CERTIFIABLE_ENTITY", "INVALID_CERTIFIABLE_BUNDLE")]
        [PSCustomObject]
        ${Type},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EQUALS", "NOT_EQUALS", "CONTAINS", "STARTS_WITH", "ENDS_WITH", "AND", "OR", "")]
        [PSCustomObject]
        ${Operation},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Property},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NegateResult} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShortCircuit} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RecordChildMatches} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SuppressMatchedItems} = $false,
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Children}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.V3 => CampaignFilterDetailsCriteriaListInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "operation" = ${Operation}
            "property" = ${Property}
            "value" = ${Value}
            "negateResult" = ${NegateResult}
            "shortCircuit" = ${ShortCircuit}
            "recordChildMatches" = ${RecordChildMatches}
            "id" = ${Id}
            "suppressMatchedItems" = ${SuppressMatchedItems}
            "children" = ${Children}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CampaignFilterDetailsCriteriaListInner<PSCustomObject>

.DESCRIPTION

Convert from JSON to CampaignFilterDetailsCriteriaListInner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CampaignFilterDetailsCriteriaListInner<PSCustomObject>
#>
function ConvertFrom-JsonToCampaignFilterDetailsCriteriaListInner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.V3 => CampaignFilterDetailsCriteriaListInner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CampaignFilterDetailsCriteriaListInner
        $AllProperties = ("type", "operation", "property", "value", "negateResult", "shortCircuit", "recordChildMatches", "id", "suppressMatchedItems", "children")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "property"))) {
            throw "Error! JSON cannot be serialized due to the required property 'property' missing."
        } else {
            $Property = $JsonParameters.PSobject.Properties["property"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) {
            throw "Error! JSON cannot be serialized due to the required property 'value' missing."
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operation"))) { #optional property not found
            $Operation = $null
        } else {
            $Operation = $JsonParameters.PSobject.Properties["operation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "negateResult"))) { #optional property not found
            $NegateResult = $null
        } else {
            $NegateResult = $JsonParameters.PSobject.Properties["negateResult"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shortCircuit"))) { #optional property not found
            $ShortCircuit = $null
        } else {
            $ShortCircuit = $JsonParameters.PSobject.Properties["shortCircuit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordChildMatches"))) { #optional property not found
            $RecordChildMatches = $null
        } else {
            $RecordChildMatches = $JsonParameters.PSobject.Properties["recordChildMatches"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "suppressMatchedItems"))) { #optional property not found
            $SuppressMatchedItems = $null
        } else {
            $SuppressMatchedItems = $JsonParameters.PSobject.Properties["suppressMatchedItems"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "children"))) { #optional property not found
            $Children = $null
        } else {
            $Children = $JsonParameters.PSobject.Properties["children"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "operation" = ${Operation}
            "property" = ${Property}
            "value" = ${Value}
            "negateResult" = ${NegateResult}
            "shortCircuit" = ${ShortCircuit}
            "recordChildMatches" = ${RecordChildMatches}
            "id" = ${Id}
            "suppressMatchedItems" = ${SuppressMatchedItems}
            "children" = ${Children}
        }

        return $PSO
    }

}

