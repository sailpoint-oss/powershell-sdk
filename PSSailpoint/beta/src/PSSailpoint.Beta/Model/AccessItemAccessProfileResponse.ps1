#
# Identity Security Cloud Beta API
# Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
# Version: 3.1.0-beta
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccessType
the access item type. accessProfile in this case
.PARAMETER Id
the access item id
.PARAMETER Name
the access profile name
.PARAMETER SourceName
the name of the source
.PARAMETER SourceId
the id of the source
.PARAMETER Description
the description for the access profile
.PARAMETER DisplayName
the display name of the identity
.PARAMETER EntitlementCount
the number of entitlements the access profile will create
.PARAMETER AppDisplayName
the name of
.PARAMETER RemoveDate
the date the access profile is no longer assigned to the specified identity
.PARAMETER Standalone
indicates whether the access profile is standalone
.PARAMETER Revocable
indicates whether the access profile is
.OUTPUTS

AccessItemAccessProfileResponse<PSCustomObject>
#>

function Initialize-BetaAccessItemAccessProfileResponse {
    [CmdletBinding()]
    Param (
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccessType},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceId},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EntitlementCount},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppDisplayName},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemoveDate},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Standalone},
        [Parameter(ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Revocable}
    )

    Process {
        'Creating PSCustomObject: PSSailpoint.Beta => BetaAccessItemAccessProfileResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Standalone) {
            throw "invalid value for 'Standalone', 'Standalone' cannot be null."
        }

        if (!$Revocable) {
            throw "invalid value for 'Revocable', 'Revocable' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "accessType" = ${AccessType}
            "id" = ${Id}
            "name" = ${Name}
            "sourceName" = ${SourceName}
            "sourceId" = ${SourceId}
            "description" = ${Description}
            "displayName" = ${DisplayName}
            "entitlementCount" = ${EntitlementCount}
            "appDisplayName" = ${AppDisplayName}
            "removeDate" = ${RemoveDate}
            "standalone" = ${Standalone}
            "revocable" = ${Revocable}
        }

        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AccessItemAccessProfileResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to AccessItemAccessProfileResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AccessItemAccessProfileResponse<PSCustomObject>
#>
function ConvertFrom-BetaJsonToAccessItemAccessProfileResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSSailpoint.Beta => BetaAccessItemAccessProfileResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BetaAccessItemAccessProfileResponse
        $AllProperties = ("accessType", "id", "name", "sourceName", "sourceId", "description", "displayName", "entitlementCount", "appDisplayName", "removeDate", "standalone", "revocable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'standalone' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "standalone"))) {
            throw "Error! JSON cannot be serialized due to the required property 'standalone' missing."
        } else {
            $Standalone = $JsonParameters.PSobject.Properties["standalone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revocable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'revocable' missing."
        } else {
            $Revocable = $JsonParameters.PSobject.Properties["revocable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accessType"))) { #optional property not found
            $AccessType = $null
        } else {
            $AccessType = $JsonParameters.PSobject.Properties["accessType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceName"))) { #optional property not found
            $SourceName = $null
        } else {
            $SourceName = $JsonParameters.PSobject.Properties["sourceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sourceId"))) { #optional property not found
            $SourceId = $null
        } else {
            $SourceId = $JsonParameters.PSobject.Properties["sourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entitlementCount"))) { #optional property not found
            $EntitlementCount = $null
        } else {
            $EntitlementCount = $JsonParameters.PSobject.Properties["entitlementCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appDisplayName"))) { #optional property not found
            $AppDisplayName = $null
        } else {
            $AppDisplayName = $JsonParameters.PSobject.Properties["appDisplayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removeDate"))) { #optional property not found
            $RemoveDate = $null
        } else {
            $RemoveDate = $JsonParameters.PSobject.Properties["removeDate"].value
        }

        $PSO = [PSCustomObject]@{
            "accessType" = ${AccessType}
            "id" = ${Id}
            "name" = ${Name}
            "sourceName" = ${SourceName}
            "sourceId" = ${SourceId}
            "description" = ${Description}
            "displayName" = ${DisplayName}
            "entitlementCount" = ${EntitlementCount}
            "appDisplayName" = ${AppDisplayName}
            "removeDate" = ${RemoveDate}
            "standalone" = ${Standalone}
            "revocable" = ${Revocable}
        }

        return $PSO
    }

}

